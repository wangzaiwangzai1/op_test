{"abi":[{"type":"function","name":"loadBlobPreimagePart","inputs":[{"name":"_z","type":"uint256","internalType":"uint256"},{"name":"_y","type":"uint256","internalType":"uint256"},{"name":"_commitment","type":"bytes","internalType":"bytes"},{"name":"_proof","type":"bytes","internalType":"bytes"},{"name":"_partOffset","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"loadKeccak256PreimagePart","inputs":[{"name":"_partOffset","type":"uint256","internalType":"uint256"},{"name":"_preimage","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"loadLocalData","inputs":[{"name":"_ident","type":"uint256","internalType":"uint256"},{"name":"_localContext","type":"bytes32","internalType":"bytes32"},{"name":"_word","type":"bytes32","internalType":"bytes32"},{"name":"_size","type":"uint256","internalType":"uint256"},{"name":"_partOffset","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"key_","type":"bytes32","internalType":"bytes32"}],"stateMutability":"nonpayable"},{"type":"function","name":"loadPrecompilePreimagePart","inputs":[{"name":"_partOffset","type":"uint256","internalType":"uint256"},{"name":"_precompile","type":"address","internalType":"address"},{"name":"_input","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"loadSha256PreimagePart","inputs":[{"name":"_partOffset","type":"uint256","internalType":"uint256"},{"name":"_preimage","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"readPreimage","inputs":[{"name":"_key","type":"bytes32","internalType":"bytes32"},{"name":"_offset","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"dat_","type":"bytes32","internalType":"bytes32"},{"name":"datLen_","type":"uint256","internalType":"uint256"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"loadBlobPreimagePart(uint256,uint256,bytes,bytes,uint256)":"9d7e8769","loadKeccak256PreimagePart(uint256,bytes)":"e1592611","loadLocalData(uint256,bytes32,bytes32,uint256,uint256)":"52f0f3ad","loadPrecompilePreimagePart(uint256,address,bytes)":"04697c78","loadSha256PreimagePart(uint256,bytes)":"8dc4be11","readPreimage(bytes32,uint256)":"e03110e1"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_z\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_y\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_commitment\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_partOffset\",\"type\":\"uint256\"}],\"name\":\"loadBlobPreimagePart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_partOffset\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_preimage\",\"type\":\"bytes\"}],\"name\":\"loadKeccak256PreimagePart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ident\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_localContext\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_word\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_partOffset\",\"type\":\"uint256\"}],\"name\":\"loadLocalData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"key_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_partOffset\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_precompile\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_input\",\"type\":\"bytes\"}],\"name\":\"loadPrecompilePreimagePart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_partOffset\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_preimage\",\"type\":\"bytes\"}],\"name\":\"loadSha256PreimagePart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"readPreimage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"dat_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"datLen_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"loadBlobPreimagePart(uint256,uint256,bytes,bytes,uint256)\":{\"params\":{\"_commitment\":\"The commitment to the polynomial. 48 bytes, part of the preimage key.\",\"_partOffset\":\"The offset of the preimage to store.\",\"_proof\":\"The KZG proof, part of the preimage key.\",\"_y\":\"Big endian point value. The preimage for the key.\",\"_z\":\"Big endian point value. Part of the preimage key.\"}},\"loadKeccak256PreimagePart(uint256,bytes)\":{\"params\":{\"_partOffset\":\"The offset of the preimage to read.\",\"_preimage\":\"The preimage data.\"}},\"loadLocalData(uint256,bytes32,bytes32,uint256,uint256)\":{\"details\":\"The local data parts are loaded into the preimage oracle under the context      of the caller - no other account can write to the caller's context      specific data.      There are 5 local data identifiers:      \\u250c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u252c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2510      \\u2502 Identifier \\u2502      Data              \\u2502      \\u251c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u253c\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2524      \\u2502          1 \\u2502 L1 Head Hash (bytes32) \\u2502      \\u2502          2 \\u2502 Output Root (bytes32)  \\u2502      \\u2502          3 \\u2502 Root Claim (bytes32)   \\u2502      \\u2502          4 \\u2502 L2 Block Number (u64)  \\u2502      \\u2502          5 \\u2502 Chain ID (u64)         \\u2502      \\u2514\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2534\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2518\",\"params\":{\"_ident\":\"The identifier of the local data.\",\"_localContext\":\"The local key context for the preimage oracle. Optionally, can be set as a constant                      if the caller only requires one set of local keys.\",\"_partOffset\":\"The offset of the local data part to write to the oracle.\",\"_size\":\"The number of bytes in `_word` to load.\",\"_word\":\"The local data word.\"}},\"loadPrecompilePreimagePart(uint256,address,bytes)\":{\"params\":{\"_input\":\"The input to the precompile call.\",\"_partOffset\":\"The offset of the precompile result being loaded.\",\"_precompile\":\"The precompile address\"}},\"loadSha256PreimagePart(uint256,bytes)\":{\"params\":{\"_partOffset\":\"The offset of the preimage to read.\",\"_preimage\":\"The preimage data.\"}},\"readPreimage(bytes32,uint256)\":{\"params\":{\"_key\":\"The key of the preimage to read.\",\"_offset\":\"The offset of the preimage to read.\"},\"returns\":{\"datLen_\":\"The length of the preimage data.\",\"dat_\":\"The preimage data.\"}}},\"title\":\"IPreimageOracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"loadKeccak256PreimagePart(uint256,bytes)\":{\"notice\":\"Prepares a preimage to be read by keccak256 key, starting at the given offset and up to 32 bytes         (clipped at preimage length, if out of data).\"},\"loadLocalData(uint256,bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Loads of local data part into the preimage oracle.\"},\"loadPrecompilePreimagePart(uint256,address,bytes)\":{\"notice\":\"Prepares a precompile result to be read by a precompile key for the specified offset.         The precompile result data is a concatenation of the precompile call status byte and its return data.         The preimage key is `6 ++ keccak256(precompile ++ input)[1:]`.\"},\"loadSha256PreimagePart(uint256,bytes)\":{\"notice\":\"Prepares a preimage to be read by sha256 key, starting at the given offset and up to 32 bytes         (clipped at preimage length, if out of data).\"},\"readPreimage(bytes32,uint256)\":{\"notice\":\"Reads a preimage from the oracle.\"}},\"notice\":\"Interface for a preimage oracle.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/cannon/interfaces/IPreimageOracle.sol\":\"IPreimageOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@lib-keccak/=lib/lib-keccak/contracts/lib/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/solmate/\",\":@solady-test/=lib/lib-keccak/lib/solady/test/\",\":@solady/=lib/solady/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":kontrol-cheatcodes/=lib/kontrol-cheatcodes/src/\",\":lib-keccak/=lib/lib-keccak/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":safe-contracts/=lib/safe-contracts/contracts/\",\":solady/=lib/solady/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"src/cannon/interfaces/IPreimageOracle.sol\":{\"keccak256\":\"0x7bda0156571b468cf0e22321945655f2dacd7082f440f742aa4612b36b388a9f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ba53777c65987bc20faa7731476c779e7794a58bafb40191a25275a05e3f8af\",\"dweb:/ipfs/QmbxQwE2BC9aabTruDqkd2CLojwq7G9i2rkWKv46Wucae1\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.15+commit.e14f2714"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"_z","type":"uint256"},{"internalType":"uint256","name":"_y","type":"uint256"},{"internalType":"bytes","name":"_commitment","type":"bytes"},{"internalType":"bytes","name":"_proof","type":"bytes"},{"internalType":"uint256","name":"_partOffset","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"loadBlobPreimagePart"},{"inputs":[{"internalType":"uint256","name":"_partOffset","type":"uint256"},{"internalType":"bytes","name":"_preimage","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"loadKeccak256PreimagePart"},{"inputs":[{"internalType":"uint256","name":"_ident","type":"uint256"},{"internalType":"bytes32","name":"_localContext","type":"bytes32"},{"internalType":"bytes32","name":"_word","type":"bytes32"},{"internalType":"uint256","name":"_size","type":"uint256"},{"internalType":"uint256","name":"_partOffset","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"loadLocalData","outputs":[{"internalType":"bytes32","name":"key_","type":"bytes32"}]},{"inputs":[{"internalType":"uint256","name":"_partOffset","type":"uint256"},{"internalType":"address","name":"_precompile","type":"address"},{"internalType":"bytes","name":"_input","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"loadPrecompilePreimagePart"},{"inputs":[{"internalType":"uint256","name":"_partOffset","type":"uint256"},{"internalType":"bytes","name":"_preimage","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"loadSha256PreimagePart"},{"inputs":[{"internalType":"bytes32","name":"_key","type":"bytes32"},{"internalType":"uint256","name":"_offset","type":"uint256"}],"stateMutability":"view","type":"function","name":"readPreimage","outputs":[{"internalType":"bytes32","name":"dat_","type":"bytes32"},{"internalType":"uint256","name":"datLen_","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"loadBlobPreimagePart(uint256,uint256,bytes,bytes,uint256)":{"params":{"_commitment":"The commitment to the polynomial. 48 bytes, part of the preimage key.","_partOffset":"The offset of the preimage to store.","_proof":"The KZG proof, part of the preimage key.","_y":"Big endian point value. The preimage for the key.","_z":"Big endian point value. Part of the preimage key."}},"loadKeccak256PreimagePart(uint256,bytes)":{"params":{"_partOffset":"The offset of the preimage to read.","_preimage":"The preimage data."}},"loadLocalData(uint256,bytes32,bytes32,uint256,uint256)":{"details":"The local data parts are loaded into the preimage oracle under the context      of the caller - no other account can write to the caller's context      specific data.      There are 5 local data identifiers:      ┌────────────┬────────────────────────┐      │ Identifier │      Data              │      ├────────────┼────────────────────────┤      │          1 │ L1 Head Hash (bytes32) │      │          2 │ Output Root (bytes32)  │      │          3 │ Root Claim (bytes32)   │      │          4 │ L2 Block Number (u64)  │      │          5 │ Chain ID (u64)         │      └────────────┴────────────────────────┘","params":{"_ident":"The identifier of the local data.","_localContext":"The local key context for the preimage oracle. Optionally, can be set as a constant                      if the caller only requires one set of local keys.","_partOffset":"The offset of the local data part to write to the oracle.","_size":"The number of bytes in `_word` to load.","_word":"The local data word."}},"loadPrecompilePreimagePart(uint256,address,bytes)":{"params":{"_input":"The input to the precompile call.","_partOffset":"The offset of the precompile result being loaded.","_precompile":"The precompile address"}},"loadSha256PreimagePart(uint256,bytes)":{"params":{"_partOffset":"The offset of the preimage to read.","_preimage":"The preimage data."}},"readPreimage(bytes32,uint256)":{"params":{"_key":"The key of the preimage to read.","_offset":"The offset of the preimage to read."},"returns":{"datLen_":"The length of the preimage data.","dat_":"The preimage data."}}},"version":1},"userdoc":{"kind":"user","methods":{"loadKeccak256PreimagePart(uint256,bytes)":{"notice":"Prepares a preimage to be read by keccak256 key, starting at the given offset and up to 32 bytes         (clipped at preimage length, if out of data)."},"loadLocalData(uint256,bytes32,bytes32,uint256,uint256)":{"notice":"Loads of local data part into the preimage oracle."},"loadPrecompilePreimagePart(uint256,address,bytes)":{"notice":"Prepares a precompile result to be read by a precompile key for the specified offset.         The precompile result data is a concatenation of the precompile call status byte and its return data.         The preimage key is `6 ++ keccak256(precompile ++ input)[1:]`."},"loadSha256PreimagePart(uint256,bytes)":{"notice":"Prepares a preimage to be read by sha256 key, starting at the given offset and up to 32 bytes         (clipped at preimage length, if out of data)."},"readPreimage(bytes32,uint256)":{"notice":"Reads a preimage from the oracle."}},"version":1}},"settings":{"remappings":["@lib-keccak/=lib/lib-keccak/contracts/lib/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@rari-capital/solmate/=lib/solmate/","@solady-test/=lib/lib-keccak/lib/solady/test/","@solady/=lib/solady/src/","ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/","kontrol-cheatcodes/=lib/kontrol-cheatcodes/src/","lib-keccak/=lib/lib-keccak/contracts/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","safe-contracts/=lib/safe-contracts/contracts/","solady/=lib/solady/","solmate/=lib/solmate/src/"],"optimizer":{"enabled":true,"runs":999999},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"src/cannon/interfaces/IPreimageOracle.sol":"IPreimageOracle"},"evmVersion":"london","libraries":{}},"sources":{"src/cannon/interfaces/IPreimageOracle.sol":{"keccak256":"0x7bda0156571b468cf0e22321945655f2dacd7082f440f742aa4612b36b388a9f","urls":["bzz-raw://5ba53777c65987bc20faa7731476c779e7794a58bafb40191a25275a05e3f8af","dweb:/ipfs/QmbxQwE2BC9aabTruDqkd2CLojwq7G9i2rkWKv46Wucae1"],"license":"MIT"}},"version":1},"storageLayout":{"storage":[],"types":{}},"userdoc":{"version":1,"kind":"user","methods":{"loadKeccak256PreimagePart(uint256,bytes)":{"notice":"Prepares a preimage to be read by keccak256 key, starting at the given offset and up to 32 bytes         (clipped at preimage length, if out of data)."},"loadLocalData(uint256,bytes32,bytes32,uint256,uint256)":{"notice":"Loads of local data part into the preimage oracle."},"loadPrecompilePreimagePart(uint256,address,bytes)":{"notice":"Prepares a precompile result to be read by a precompile key for the specified offset.         The precompile result data is a concatenation of the precompile call status byte and its return data.         The preimage key is `6 ++ keccak256(precompile ++ input)[1:]`."},"loadSha256PreimagePart(uint256,bytes)":{"notice":"Prepares a preimage to be read by sha256 key, starting at the given offset and up to 32 bytes         (clipped at preimage length, if out of data)."},"readPreimage(bytes32,uint256)":{"notice":"Reads a preimage from the oracle."}},"notice":"Interface for a preimage oracle."},"devdoc":{"version":1,"kind":"dev","methods":{"loadBlobPreimagePart(uint256,uint256,bytes,bytes,uint256)":{"params":{"_commitment":"The commitment to the polynomial. 48 bytes, part of the preimage key.","_partOffset":"The offset of the preimage to store.","_proof":"The KZG proof, part of the preimage key.","_y":"Big endian point value. The preimage for the key.","_z":"Big endian point value. Part of the preimage key."}},"loadKeccak256PreimagePart(uint256,bytes)":{"params":{"_partOffset":"The offset of the preimage to read.","_preimage":"The preimage data."}},"loadLocalData(uint256,bytes32,bytes32,uint256,uint256)":{"details":"The local data parts are loaded into the preimage oracle under the context      of the caller - no other account can write to the caller's context      specific data.      There are 5 local data identifiers:      ┌────────────┬────────────────────────┐      │ Identifier │      Data              │      ├────────────┼────────────────────────┤      │          1 │ L1 Head Hash (bytes32) │      │          2 │ Output Root (bytes32)  │      │          3 │ Root Claim (bytes32)   │      │          4 │ L2 Block Number (u64)  │      │          5 │ Chain ID (u64)         │      └────────────┴────────────────────────┘","params":{"_ident":"The identifier of the local data.","_localContext":"The local key context for the preimage oracle. Optionally, can be set as a constant                      if the caller only requires one set of local keys.","_partOffset":"The offset of the local data part to write to the oracle.","_size":"The number of bytes in `_word` to load.","_word":"The local data word."}},"loadPrecompilePreimagePart(uint256,address,bytes)":{"params":{"_input":"The input to the precompile call.","_partOffset":"The offset of the precompile result being loaded.","_precompile":"The precompile address"}},"loadSha256PreimagePart(uint256,bytes)":{"params":{"_partOffset":"The offset of the preimage to read.","_preimage":"The preimage data."}},"readPreimage(bytes32,uint256)":{"params":{"_key":"The key of the preimage to read.","_offset":"The offset of the preimage to read."},"returns":{"datLen_":"The length of the preimage data.","dat_":"The preimage data."}}},"title":"IPreimageOracle"},"ast":{"absolutePath":"src/cannon/interfaces/IPreimageOracle.sol","id":99458,"exportedSymbols":{"IPreimageOracle":[99457]},"nodeType":"SourceUnit","src":"32:4354:167","nodes":[{"id":99387,"nodeType":"PragmaDirective","src":"32:23:167","nodes":[],"literals":["solidity","0.8",".15"]},{"id":99457,"nodeType":"ContractDefinition","src":"129:4256:167","nodes":[{"id":99400,"nodeType":"FunctionDefinition","src":"420:107:167","nodes":[],"documentation":{"id":99389,"nodeType":"StructuredDocumentation","src":"161:254:167","text":"@notice Reads a preimage from the oracle.\n @param _key The key of the preimage to read.\n @param _offset The offset of the preimage to read.\n @return dat_ The preimage data.\n @return datLen_ The length of the preimage data."},"functionSelector":"e03110e1","implemented":false,"kind":"function","modifiers":[],"name":"readPreimage","nameLocation":"429:12:167","parameters":{"id":99394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":99391,"mutability":"mutable","name":"_key","nameLocation":"450:4:167","nodeType":"VariableDeclaration","scope":99400,"src":"442:12:167","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":99390,"name":"bytes32","nodeType":"ElementaryTypeName","src":"442:7:167","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":99393,"mutability":"mutable","name":"_offset","nameLocation":"464:7:167","nodeType":"VariableDeclaration","scope":99400,"src":"456:15:167","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":99392,"name":"uint256","nodeType":"ElementaryTypeName","src":"456:7:167","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"441:31:167"},"returnParameters":{"id":99399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":99396,"mutability":"mutable","name":"dat_","nameLocation":"504:4:167","nodeType":"VariableDeclaration","scope":99400,"src":"496:12:167","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":99395,"name":"bytes32","nodeType":"ElementaryTypeName","src":"496:7:167","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":99398,"mutability":"mutable","name":"datLen_","nameLocation":"518:7:167","nodeType":"VariableDeclaration","scope":99400,"src":"510:15:167","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":99397,"name":"uint256","nodeType":"ElementaryTypeName","src":"510:7:167","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"495:31:167"},"scope":99457,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":99416,"nodeType":"FunctionDefinition","src":"2037:207:167","nodes":[],"documentation":{"id":99401,"nodeType":"StructuredDocumentation","src":"533:1499:167","text":"@notice Loads of local data part into the preimage oracle.\n @param _ident The identifier of the local data.\n @param _localContext The local key context for the preimage oracle. Optionally, can be set as a constant\n                      if the caller only requires one set of local keys.\n @param _word The local data word.\n @param _size The number of bytes in `_word` to load.\n @param _partOffset The offset of the local data part to write to the oracle.\n @dev The local data parts are loaded into the preimage oracle under the context\n      of the caller - no other account can write to the caller's context\n      specific data.\n      There are 5 local data identifiers:\n      ┌────────────┬────────────────────────┐\n      │ Identifier │      Data              │\n      ├────────────┼────────────────────────┤\n      │          1 │ L1 Head Hash (bytes32) │\n      │          2 │ Output Root (bytes32)  │\n      │          3 │ Root Claim (bytes32)   │\n      │          4 │ L2 Block Number (u64)  │\n      │          5 │ Chain ID (u64)         │\n      └────────────┴────────────────────────┘"},"functionSelector":"52f0f3ad","implemented":false,"kind":"function","modifiers":[],"name":"loadLocalData","nameLocation":"2046:13:167","parameters":{"id":99412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":99403,"mutability":"mutable","name":"_ident","nameLocation":"2077:6:167","nodeType":"VariableDeclaration","scope":99416,"src":"2069:14:167","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":99402,"name":"uint256","nodeType":"ElementaryTypeName","src":"2069:7:167","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":99405,"mutability":"mutable","name":"_localContext","nameLocation":"2101:13:167","nodeType":"VariableDeclaration","scope":99416,"src":"2093:21:167","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":99404,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2093:7:167","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":99407,"mutability":"mutable","name":"_word","nameLocation":"2132:5:167","nodeType":"VariableDeclaration","scope":99416,"src":"2124:13:167","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":99406,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2124:7:167","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":99409,"mutability":"mutable","name":"_size","nameLocation":"2155:5:167","nodeType":"VariableDeclaration","scope":99416,"src":"2147:13:167","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":99408,"name":"uint256","nodeType":"ElementaryTypeName","src":"2147:7:167","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":99411,"mutability":"mutable","name":"_partOffset","nameLocation":"2178:11:167","nodeType":"VariableDeclaration","scope":99416,"src":"2170:19:167","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":99410,"name":"uint256","nodeType":"ElementaryTypeName","src":"2170:7:167","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2059:136:167"},"returnParameters":{"id":99415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":99414,"mutability":"mutable","name":"key_","nameLocation":"2238:4:167","nodeType":"VariableDeclaration","scope":99416,"src":"2230:12:167","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":99413,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2230:7:167","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2229:14:167"},"scope":99457,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":99424,"nodeType":"FunctionDefinition","src":"2532:91:167","nodes":[],"documentation":{"id":99417,"nodeType":"StructuredDocumentation","src":"2250:277:167","text":"@notice Prepares a preimage to be read by keccak256 key, starting at the given offset and up to 32 bytes\n         (clipped at preimage length, if out of data).\n @param _partOffset The offset of the preimage to read.\n @param _preimage The preimage data."},"functionSelector":"e1592611","implemented":false,"kind":"function","modifiers":[],"name":"loadKeccak256PreimagePart","nameLocation":"2541:25:167","parameters":{"id":99422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":99419,"mutability":"mutable","name":"_partOffset","nameLocation":"2575:11:167","nodeType":"VariableDeclaration","scope":99424,"src":"2567:19:167","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":99418,"name":"uint256","nodeType":"ElementaryTypeName","src":"2567:7:167","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":99421,"mutability":"mutable","name":"_preimage","nameLocation":"2603:9:167","nodeType":"VariableDeclaration","scope":99424,"src":"2588:24:167","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":99420,"name":"bytes","nodeType":"ElementaryTypeName","src":"2588:5:167","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2566:47:167"},"returnParameters":{"id":99423,"nodeType":"ParameterList","parameters":[],"src":"2622:0:167"},"scope":99457,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":99432,"nodeType":"FunctionDefinition","src":"2908:88:167","nodes":[],"documentation":{"id":99425,"nodeType":"StructuredDocumentation","src":"2629:274:167","text":"@notice Prepares a preimage to be read by sha256 key, starting at the given offset and up to 32 bytes\n         (clipped at preimage length, if out of data).\n @param _partOffset The offset of the preimage to read.\n @param _preimage The preimage data."},"functionSelector":"8dc4be11","implemented":false,"kind":"function","modifiers":[],"name":"loadSha256PreimagePart","nameLocation":"2917:22:167","parameters":{"id":99430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":99427,"mutability":"mutable","name":"_partOffset","nameLocation":"2948:11:167","nodeType":"VariableDeclaration","scope":99432,"src":"2940:19:167","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":99426,"name":"uint256","nodeType":"ElementaryTypeName","src":"2940:7:167","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":99429,"mutability":"mutable","name":"_preimage","nameLocation":"2976:9:167","nodeType":"VariableDeclaration","scope":99432,"src":"2961:24:167","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":99428,"name":"bytes","nodeType":"ElementaryTypeName","src":"2961:5:167","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2939:47:167"},"returnParameters":{"id":99431,"nodeType":"ParameterList","parameters":[],"src":"2995:0:167"},"scope":99457,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":99446,"nodeType":"FunctionDefinition","src":"3596:189:167","nodes":[],"documentation":{"id":99433,"nodeType":"StructuredDocumentation","src":"3236:355:167","text":"@param _z Big endian point value. Part of the preimage key.\n @param _y Big endian point value. The preimage for the key.\n @param _commitment The commitment to the polynomial. 48 bytes, part of the preimage key.\n @param _proof The KZG proof, part of the preimage key.\n @param _partOffset The offset of the preimage to store."},"functionSelector":"9d7e8769","implemented":false,"kind":"function","modifiers":[],"name":"loadBlobPreimagePart","nameLocation":"3605:20:167","parameters":{"id":99444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":99435,"mutability":"mutable","name":"_z","nameLocation":"3643:2:167","nodeType":"VariableDeclaration","scope":99446,"src":"3635:10:167","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":99434,"name":"uint256","nodeType":"ElementaryTypeName","src":"3635:7:167","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":99437,"mutability":"mutable","name":"_y","nameLocation":"3663:2:167","nodeType":"VariableDeclaration","scope":99446,"src":"3655:10:167","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":99436,"name":"uint256","nodeType":"ElementaryTypeName","src":"3655:7:167","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":99439,"mutability":"mutable","name":"_commitment","nameLocation":"3690:11:167","nodeType":"VariableDeclaration","scope":99446,"src":"3675:26:167","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":99438,"name":"bytes","nodeType":"ElementaryTypeName","src":"3675:5:167","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":99441,"mutability":"mutable","name":"_proof","nameLocation":"3726:6:167","nodeType":"VariableDeclaration","scope":99446,"src":"3711:21:167","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":99440,"name":"bytes","nodeType":"ElementaryTypeName","src":"3711:5:167","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":99443,"mutability":"mutable","name":"_partOffset","nameLocation":"3750:11:167","nodeType":"VariableDeclaration","scope":99446,"src":"3742:19:167","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":99442,"name":"uint256","nodeType":"ElementaryTypeName","src":"3742:7:167","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3625:142:167"},"returnParameters":{"id":99445,"nodeType":"ParameterList","parameters":[],"src":"3784:0:167"},"scope":99457,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":99456,"nodeType":"FunctionDefinition","src":"4273:110:167","nodes":[],"documentation":{"id":99447,"nodeType":"StructuredDocumentation","src":"3791:477:167","text":"@notice Prepares a precompile result to be read by a precompile key for the specified offset.\n         The precompile result data is a concatenation of the precompile call status byte and its return data.\n         The preimage key is `6 ++ keccak256(precompile ++ input)[1:]`.\n @param _partOffset The offset of the precompile result being loaded.\n @param _precompile The precompile address\n @param _input The input to the precompile call."},"functionSelector":"04697c78","implemented":false,"kind":"function","modifiers":[],"name":"loadPrecompilePreimagePart","nameLocation":"4282:26:167","parameters":{"id":99454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":99449,"mutability":"mutable","name":"_partOffset","nameLocation":"4317:11:167","nodeType":"VariableDeclaration","scope":99456,"src":"4309:19:167","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":99448,"name":"uint256","nodeType":"ElementaryTypeName","src":"4309:7:167","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":99451,"mutability":"mutable","name":"_precompile","nameLocation":"4338:11:167","nodeType":"VariableDeclaration","scope":99456,"src":"4330:19:167","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":99450,"name":"address","nodeType":"ElementaryTypeName","src":"4330:7:167","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":99453,"mutability":"mutable","name":"_input","nameLocation":"4366:6:167","nodeType":"VariableDeclaration","scope":99456,"src":"4351:21:167","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":99452,"name":"bytes","nodeType":"ElementaryTypeName","src":"4351:5:167","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4308:65:167"},"returnParameters":{"id":99455,"nodeType":"ParameterList","parameters":[],"src":"4382:0:167"},"scope":99457,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IPreimageOracle","contractDependencies":[],"contractKind":"interface","documentation":{"id":99388,"nodeType":"StructuredDocumentation","src":"57:72:167","text":"@title IPreimageOracle\n @notice Interface for a preimage oracle."},"fullyImplemented":false,"linearizedBaseContracts":[99457],"name":"IPreimageOracle","nameLocation":"139:15:167","scope":99458,"usedErrors":[]}],"license":"MIT"},"id":167}