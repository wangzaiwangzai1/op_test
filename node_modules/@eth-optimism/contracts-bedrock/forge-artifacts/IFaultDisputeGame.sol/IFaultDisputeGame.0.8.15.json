{"abi":[{"type":"function","name":"addLocalData","inputs":[{"name":"_ident","type":"uint256","internalType":"uint256"},{"name":"_execLeafIdx","type":"uint256","internalType":"uint256"},{"name":"_partOffset","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"attack","inputs":[{"name":"_disputed","type":"bytes32","internalType":"Claim"},{"name":"_parentIndex","type":"uint256","internalType":"uint256"},{"name":"_claim","type":"bytes32","internalType":"Claim"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"createdAt","inputs":[],"outputs":[{"name":"createdAt_","type":"uint64","internalType":"Timestamp"}],"stateMutability":"view"},{"type":"function","name":"defend","inputs":[{"name":"_disputed","type":"bytes32","internalType":"Claim"},{"name":"_parentIndex","type":"uint256","internalType":"uint256"},{"name":"_claim","type":"bytes32","internalType":"Claim"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"extraData","inputs":[],"outputs":[{"name":"extraData_","type":"bytes","internalType":"bytes"}],"stateMutability":"pure"},{"type":"function","name":"gameCreator","inputs":[],"outputs":[{"name":"creator_","type":"address","internalType":"address"}],"stateMutability":"pure"},{"type":"function","name":"gameData","inputs":[],"outputs":[{"name":"gameType_","type":"uint32","internalType":"GameType"},{"name":"rootClaim_","type":"bytes32","internalType":"Claim"},{"name":"extraData_","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"gameType","inputs":[],"outputs":[{"name":"gameType_","type":"uint32","internalType":"GameType"}],"stateMutability":"view"},{"type":"function","name":"getNumToResolve","inputs":[{"name":"_claimIndex","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"numRemainingChildren_","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"initialize","inputs":[],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"l1Head","inputs":[],"outputs":[{"name":"l1Head_","type":"bytes32","internalType":"Hash"}],"stateMutability":"pure"},{"type":"function","name":"l2BlockNumber","inputs":[],"outputs":[{"name":"l2BlockNumber_","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"resolve","inputs":[],"outputs":[{"name":"status_","type":"uint8","internalType":"enum GameStatus"}],"stateMutability":"nonpayable"},{"type":"function","name":"resolveClaim","inputs":[{"name":"_claimIndex","type":"uint256","internalType":"uint256"},{"name":"_numToResolve","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"resolvedAt","inputs":[],"outputs":[{"name":"resolvedAt_","type":"uint64","internalType":"Timestamp"}],"stateMutability":"view"},{"type":"function","name":"rootClaim","inputs":[],"outputs":[{"name":"rootClaim_","type":"bytes32","internalType":"Claim"}],"stateMutability":"pure"},{"type":"function","name":"startingBlockNumber","inputs":[],"outputs":[{"name":"startingBlockNumber_","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"startingOutputRoot","inputs":[],"outputs":[{"name":"startingRoot_","type":"bytes32","internalType":"Hash"},{"name":"l2BlockNumber_","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"startingRootHash","inputs":[],"outputs":[{"name":"startingRootHash_","type":"bytes32","internalType":"Hash"}],"stateMutability":"view"},{"type":"function","name":"status","inputs":[],"outputs":[{"name":"status_","type":"uint8","internalType":"enum GameStatus"}],"stateMutability":"view"},{"type":"function","name":"step","inputs":[{"name":"_claimIndex","type":"uint256","internalType":"uint256"},{"name":"_isAttack","type":"bool","internalType":"bool"},{"name":"_stateData","type":"bytes","internalType":"bytes"},{"name":"_proof","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"Move","inputs":[{"name":"parentIndex","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"claim","type":"bytes32","indexed":true,"internalType":"Claim"},{"name":"claimant","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"Resolved","inputs":[{"name":"status","type":"uint8","indexed":true,"internalType":"enum GameStatus"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"addLocalData(uint256,uint256,uint256)":"f8f43ff6","attack(bytes32,uint256,bytes32)":"472777c6","createdAt()":"cf09e0d0","defend(bytes32,uint256,bytes32)":"7b0f0adc","extraData()":"609d3334","gameCreator()":"37b1b229","gameData()":"fa24f743","gameType()":"bbdc02db","getNumToResolve(uint256)":"5a5fa2d9","initialize()":"8129fc1c","l1Head()":"6361506d","l2BlockNumber()":"8b85902b","resolve()":"2810e1d6","resolveClaim(uint256,uint256)":"03c2924d","resolvedAt()":"19effeb4","rootClaim()":"bcef3b55","startingBlockNumber()":"70872aa5","startingOutputRoot()":"57da950e","startingRootHash()":"25fc2ace","status()":"200d2ed2","step(uint256,bool,bytes,bytes)":"d8cc1a3c"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"parentIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"Claim\",\"name\":\"claim\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"}],\"name\":\"Move\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum GameStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"Resolved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ident\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_execLeafIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_partOffset\",\"type\":\"uint256\"}],\"name\":\"addLocalData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Claim\",\"name\":\"_disputed\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_parentIndex\",\"type\":\"uint256\"},{\"internalType\":\"Claim\",\"name\":\"_claim\",\"type\":\"bytes32\"}],\"name\":\"attack\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createdAt\",\"outputs\":[{\"internalType\":\"Timestamp\",\"name\":\"createdAt_\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Claim\",\"name\":\"_disputed\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_parentIndex\",\"type\":\"uint256\"},{\"internalType\":\"Claim\",\"name\":\"_claim\",\"type\":\"bytes32\"}],\"name\":\"defend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"extraData_\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator_\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameData\",\"outputs\":[{\"internalType\":\"GameType\",\"name\":\"gameType_\",\"type\":\"uint32\"},{\"internalType\":\"Claim\",\"name\":\"rootClaim_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"extraData_\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameType\",\"outputs\":[{\"internalType\":\"GameType\",\"name\":\"gameType_\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimIndex\",\"type\":\"uint256\"}],\"name\":\"getNumToResolve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numRemainingChildren_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Head\",\"outputs\":[{\"internalType\":\"Hash\",\"name\":\"l1Head_\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2BlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"l2BlockNumber_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"enum GameStatus\",\"name\":\"status_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numToResolve\",\"type\":\"uint256\"}],\"name\":\"resolveClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolvedAt\",\"outputs\":[{\"internalType\":\"Timestamp\",\"name\":\"resolvedAt_\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootClaim\",\"outputs\":[{\"internalType\":\"Claim\",\"name\":\"rootClaim_\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startingBlockNumber_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingOutputRoot\",\"outputs\":[{\"internalType\":\"Hash\",\"name\":\"startingRoot_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"l2BlockNumber_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingRootHash\",\"outputs\":[{\"internalType\":\"Hash\",\"name\":\"startingRootHash_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"enum GameStatus\",\"name\":\"status_\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isAttack\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_stateData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"step\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Move(uint256,bytes32,address)\":{\"params\":{\"claim\":\"The claim being added\",\"claimant\":\"The address of the claimant\",\"parentIndex\":\"The index within the `claimData` array of the parent claim\"}}},\"kind\":\"dev\",\"methods\":{\"addLocalData(uint256,uint256,uint256)\":{\"params\":{\"_execLeafIdx\":\"The index of the leaf claim in an execution subgame that requires the local data for a step.\",\"_ident\":\"The local identifier of the data to post.\",\"_partOffset\":\"The offset of the data to post.\"}},\"attack(bytes32,uint256,bytes32)\":{\"params\":{\"_claim\":\"The `Claim` at the relative attack position.\",\"_disputed\":\"The `Claim` being attacked.\",\"_parentIndex\":\"Index of the `Claim` to attack in the `claimData` array. This must match the `_disputed` claim.\"}},\"createdAt()\":{\"returns\":{\"createdAt_\":\"The timestamp that the DisputeGame contract was created at.\"}},\"defend(bytes32,uint256,bytes32)\":{\"params\":{\"_claim\":\"The `Claim` at the relative defense position.\",\"_parentIndex\":\"Index of the claim to defend in the `claimData` array. This must match the `_disputed` claim.\"}},\"extraData()\":{\"details\":\"`clones-with-immutable-args` argument #4\",\"returns\":{\"extraData_\":\"Any extra data supplied to the dispute game contract by the creator.\"}},\"gameCreator()\":{\"details\":\"`clones-with-immutable-args` argument #1\",\"returns\":{\"creator_\":\"The creator of the dispute game.\"}},\"gameData()\":{\"returns\":{\"extraData_\":\"Any extra data supplied to the dispute game contract by the creator.\",\"gameType_\":\"The type of proof system being used.\",\"rootClaim_\":\"The root claim of the DisputeGame.\"}},\"gameType()\":{\"details\":\"The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.\",\"returns\":{\"gameType_\":\"The type of proof system being used.\"}},\"getNumToResolve(uint256)\":{\"params\":{\"_claimIndex\":\"The subgame root claim's index within `claimData`.\"},\"returns\":{\"numRemainingChildren_\":\"The number of children that still need to be checked to resolve the subgame.\"}},\"initialize()\":{\"details\":\"This function may only be called once.\"},\"l1Head()\":{\"details\":\"`clones-with-immutable-args` argument #3\",\"returns\":{\"l1Head_\":\"The parent hash of the L1 block when the dispute game was created.\"}},\"resolve()\":{\"details\":\"May only be called if the `status` is `IN_PROGRESS`.\",\"returns\":{\"status_\":\"The status of the game after resolution.\"}},\"resolveClaim(uint256,uint256)\":{\"details\":\"This function must be called bottom-up in the DAG      A subgame is a tree of claims that has a maximum depth of 1.      A subgame root claims is valid if, and only if, all of its child claims are invalid.      At the deepest level in the DAG, a claim is invalid if there's a successful step against it.\",\"params\":{\"_claimIndex\":\"The index of the subgame root claim to resolve.\",\"_numToResolve\":\"The number of subgames to resolve in this call. If the input is `0`, and this is the first                      page, this function will attempt to check all of the subgame's children at once.\"}},\"resolvedAt()\":{\"returns\":{\"resolvedAt_\":\"The timestamp that the DisputeGame contract was resolved at.\"}},\"rootClaim()\":{\"details\":\"`clones-with-immutable-args` argument #2\",\"returns\":{\"rootClaim_\":\"The root claim of the DisputeGame.\"}},\"status()\":{\"returns\":{\"status_\":\"The current status of the game.\"}},\"step(uint256,bool,bytes,bytes)\":{\"details\":\"This function should point to a fault proof processor in order to execute      a step in the fault proof program on-chain. The interface of the fault proof      processor contract should adhere to the `IBigStepper` interface.\",\"params\":{\"_claimIndex\":\"The index of the challenged claim within `claimData`.\",\"_isAttack\":\"Whether or not the step is an attack or a defense.\",\"_proof\":\"Proof to access memory nodes in the VM's merkle state tree.\",\"_stateData\":\"The stateData of the step is the preimage of the claim at the given        prestate, which is at `_stateIndex` if the move is an attack and `_claimIndex` if        the move is a defense. If the step is an attack on the first instruction, it is        the absolute prestate of the fault proof VM.\"}}},\"title\":\"IFaultDisputeGame\",\"version\":1},\"userdoc\":{\"events\":{\"Move(uint256,bytes32,address)\":{\"notice\":\"Emitted when a new claim is added to the DAG by `claimant`\"},\"Resolved(uint8)\":{\"notice\":\"Emitted when the game is resolved.\"}},\"kind\":\"user\",\"methods\":{\"addLocalData(uint256,uint256,uint256)\":{\"notice\":\"Posts the requested local data to the VM's `PreimageOralce`.\"},\"attack(bytes32,uint256,bytes32)\":{\"notice\":\"Attack a disagreed upon `Claim`.\"},\"createdAt()\":{\"notice\":\"Returns the timestamp that the DisputeGame contract was created at.\"},\"defend(bytes32,uint256,bytes32)\":{\"notice\":\"Defend an agreed upon `Claim`._disputed The `Claim` being defended.\"},\"extraData()\":{\"notice\":\"Getter for the extra data.\"},\"gameCreator()\":{\"notice\":\"Getter for the creator of the dispute game.\"},\"gameData()\":{\"notice\":\"A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation.\"},\"gameType()\":{\"notice\":\"Getter for the game type.\"},\"getNumToResolve(uint256)\":{\"notice\":\"Returns the number of children that still need to be resolved in order to fully resolve a subgame rooted         at `_claimIndex`.\"},\"initialize()\":{\"notice\":\"Initializes the contract.\"},\"l1Head()\":{\"notice\":\"Getter for the parent hash of the L1 block when the dispute game was created.\"},\"l2BlockNumber()\":{\"notice\":\"The l2BlockNumber of the disputed output root in the `L2OutputOracle`.\"},\"resolve()\":{\"notice\":\"If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties.\"},\"resolveClaim(uint256,uint256)\":{\"notice\":\"Resolves the subgame rooted at the given claim index. `_numToResolve` specifies how many children of         the subgame will be checked in this call. If `_numToResolve` is less than the number of children, an         internal cursor will be updated and this function may be called again to complete resolution of the         subgame.\"},\"resolvedAt()\":{\"notice\":\"Returns the timestamp that the DisputeGame contract was resolved at.\"},\"rootClaim()\":{\"notice\":\"Getter for the root claim.\"},\"startingBlockNumber()\":{\"notice\":\"Only the starting block number of the game.\"},\"startingOutputRoot()\":{\"notice\":\"Starting output root and block number of the game.\"},\"startingRootHash()\":{\"notice\":\"Only the starting output root of the game.\"},\"status()\":{\"notice\":\"Returns the current status of the game.\"},\"step(uint256,bool,bytes,bytes)\":{\"notice\":\"Perform an instruction step via an on-chain fault proof processor.\"}},\"notice\":\"The interface for a fault proof backed dispute game.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/dispute/interfaces/IFaultDisputeGame.sol\":\"IFaultDisputeGame\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@lib-keccak/=lib/lib-keccak/contracts/lib/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/solmate/\",\":@solady-test/=lib/lib-keccak/lib/solady/test/\",\":@solady/=lib/solady/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":kontrol-cheatcodes/=lib/kontrol-cheatcodes/src/\",\":lib-keccak/=lib/lib-keccak/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":safe-contracts/=lib/safe-contracts/contracts/\",\":solady/=lib/solady/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"src/dispute/interfaces/IDisputeGame.sol\":{\"keccak256\":\"0xa4d3617892dfee02890ea135e778ed0207aa8545c97cb2a421bae7c1a659baa0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0e31653e3463dbc3f3b572ca4a1198d9aadc7d8606a2b690a58e2c082a0d0090\",\"dweb:/ipfs/QmdbxJK4T5Hu652cSkxpAjYPxrK1i5ZM62oyopzmAzRn6M\"]},\"src/dispute/interfaces/IFaultDisputeGame.sol\":{\"keccak256\":\"0x9655abdda7d33496f012e5a8bf492c7733573024cc7779dc79fb4553f11e9f0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4f8f0acce831c36385a4b06a5142ddfc2dbe2e7c403193df2585293ef2821c03\",\"dweb:/ipfs/QmR4XJ8rG1aiR7NgyTNbQ4swe8CFWkytudbWiKKMaqiCMH\"]},\"src/dispute/interfaces/IInitializable.sol\":{\"keccak256\":\"0xbc553af6501a972850a98fc6284943f8e95a5183a7b4f64198c16fca2338c9dc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1f1c422ce4a9e72f0bbdec36434206da4af3a32d38f922acab957942e994ce5\",\"dweb:/ipfs/QmNQGWBceLxx1CKSMLfwTM584q8UCgUpF4rrFe8pdbWYtj\"]},\"src/dispute/lib/LibPosition.sol\":{\"keccak256\":\"0x7c5f19f8f54f06de2ce1c6cdcc5c7af65ac405130a4066cdaf146ca315818241\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://06905e5ede94784e32748ad60557cb0b0829089d65430518e7042b80d2f64e2d\",\"dweb:/ipfs/QmeGKMmnFnow2VrRvTSPavCrToqQ3qDpEaR1tVoK6Hzg8K\"]},\"src/dispute/lib/LibUDT.sol\":{\"keccak256\":\"0x02eef648a47889c21c8261101c99a491e8497f9f7d088b66dffa4ded6afd7855\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://88001eed40a7dbbc5193d9671e1c05273dce1ab2a95bb866543421d2863ed04e\",\"dweb:/ipfs/QmSNU8mFUFxhVdLBToL8r3v7tpugyvPDbDU4vkc3Xd4omX\"]},\"src/dispute/lib/Types.sol\":{\"keccak256\":\"0x5d6a2b87e0358d54bc22a8fdcfcd17e347bcfa69b774d9c75694e3f843c2c2a8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df0ea07c78675e3fbfacdf92026ed77cd2b6596b358c09a7f29148b6aa80a6bd\",\"dweb:/ipfs/QmaNVv9NQg1Ea6AoHvv1oZCVX2ZAuwoW5vBMf7cVMvayqC\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.15+commit.e14f2714"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"parentIndex","type":"uint256","indexed":true},{"internalType":"Claim","name":"claim","type":"bytes32","indexed":true},{"internalType":"address","name":"claimant","type":"address","indexed":true}],"type":"event","name":"Move","anonymous":false},{"inputs":[{"internalType":"enum GameStatus","name":"status","type":"uint8","indexed":true}],"type":"event","name":"Resolved","anonymous":false},{"inputs":[{"internalType":"uint256","name":"_ident","type":"uint256"},{"internalType":"uint256","name":"_execLeafIdx","type":"uint256"},{"internalType":"uint256","name":"_partOffset","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"addLocalData"},{"inputs":[{"internalType":"Claim","name":"_disputed","type":"bytes32"},{"internalType":"uint256","name":"_parentIndex","type":"uint256"},{"internalType":"Claim","name":"_claim","type":"bytes32"}],"stateMutability":"payable","type":"function","name":"attack"},{"inputs":[],"stateMutability":"view","type":"function","name":"createdAt","outputs":[{"internalType":"Timestamp","name":"createdAt_","type":"uint64"}]},{"inputs":[{"internalType":"Claim","name":"_disputed","type":"bytes32"},{"internalType":"uint256","name":"_parentIndex","type":"uint256"},{"internalType":"Claim","name":"_claim","type":"bytes32"}],"stateMutability":"payable","type":"function","name":"defend"},{"inputs":[],"stateMutability":"pure","type":"function","name":"extraData","outputs":[{"internalType":"bytes","name":"extraData_","type":"bytes"}]},{"inputs":[],"stateMutability":"pure","type":"function","name":"gameCreator","outputs":[{"internalType":"address","name":"creator_","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"gameData","outputs":[{"internalType":"GameType","name":"gameType_","type":"uint32"},{"internalType":"Claim","name":"rootClaim_","type":"bytes32"},{"internalType":"bytes","name":"extraData_","type":"bytes"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"gameType","outputs":[{"internalType":"GameType","name":"gameType_","type":"uint32"}]},{"inputs":[{"internalType":"uint256","name":"_claimIndex","type":"uint256"}],"stateMutability":"view","type":"function","name":"getNumToResolve","outputs":[{"internalType":"uint256","name":"numRemainingChildren_","type":"uint256"}]},{"inputs":[],"stateMutability":"payable","type":"function","name":"initialize"},{"inputs":[],"stateMutability":"pure","type":"function","name":"l1Head","outputs":[{"internalType":"Hash","name":"l1Head_","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"l2BlockNumber","outputs":[{"internalType":"uint256","name":"l2BlockNumber_","type":"uint256"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"resolve","outputs":[{"internalType":"enum GameStatus","name":"status_","type":"uint8"}]},{"inputs":[{"internalType":"uint256","name":"_claimIndex","type":"uint256"},{"internalType":"uint256","name":"_numToResolve","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"resolveClaim"},{"inputs":[],"stateMutability":"view","type":"function","name":"resolvedAt","outputs":[{"internalType":"Timestamp","name":"resolvedAt_","type":"uint64"}]},{"inputs":[],"stateMutability":"pure","type":"function","name":"rootClaim","outputs":[{"internalType":"Claim","name":"rootClaim_","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"startingBlockNumber","outputs":[{"internalType":"uint256","name":"startingBlockNumber_","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"startingOutputRoot","outputs":[{"internalType":"Hash","name":"startingRoot_","type":"bytes32"},{"internalType":"uint256","name":"l2BlockNumber_","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"startingRootHash","outputs":[{"internalType":"Hash","name":"startingRootHash_","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"status","outputs":[{"internalType":"enum GameStatus","name":"status_","type":"uint8"}]},{"inputs":[{"internalType":"uint256","name":"_claimIndex","type":"uint256"},{"internalType":"bool","name":"_isAttack","type":"bool"},{"internalType":"bytes","name":"_stateData","type":"bytes"},{"internalType":"bytes","name":"_proof","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"step"}],"devdoc":{"kind":"dev","methods":{"addLocalData(uint256,uint256,uint256)":{"params":{"_execLeafIdx":"The index of the leaf claim in an execution subgame that requires the local data for a step.","_ident":"The local identifier of the data to post.","_partOffset":"The offset of the data to post."}},"attack(bytes32,uint256,bytes32)":{"params":{"_claim":"The `Claim` at the relative attack position.","_disputed":"The `Claim` being attacked.","_parentIndex":"Index of the `Claim` to attack in the `claimData` array. This must match the `_disputed` claim."}},"createdAt()":{"returns":{"createdAt_":"The timestamp that the DisputeGame contract was created at."}},"defend(bytes32,uint256,bytes32)":{"params":{"_claim":"The `Claim` at the relative defense position.","_parentIndex":"Index of the claim to defend in the `claimData` array. This must match the `_disputed` claim."}},"extraData()":{"details":"`clones-with-immutable-args` argument #4","returns":{"extraData_":"Any extra data supplied to the dispute game contract by the creator."}},"gameCreator()":{"details":"`clones-with-immutable-args` argument #1","returns":{"creator_":"The creator of the dispute game."}},"gameData()":{"returns":{"extraData_":"Any extra data supplied to the dispute game contract by the creator.","gameType_":"The type of proof system being used.","rootClaim_":"The root claim of the DisputeGame."}},"gameType()":{"details":"The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.","returns":{"gameType_":"The type of proof system being used."}},"getNumToResolve(uint256)":{"params":{"_claimIndex":"The subgame root claim's index within `claimData`."},"returns":{"numRemainingChildren_":"The number of children that still need to be checked to resolve the subgame."}},"initialize()":{"details":"This function may only be called once."},"l1Head()":{"details":"`clones-with-immutable-args` argument #3","returns":{"l1Head_":"The parent hash of the L1 block when the dispute game was created."}},"resolve()":{"details":"May only be called if the `status` is `IN_PROGRESS`.","returns":{"status_":"The status of the game after resolution."}},"resolveClaim(uint256,uint256)":{"details":"This function must be called bottom-up in the DAG      A subgame is a tree of claims that has a maximum depth of 1.      A subgame root claims is valid if, and only if, all of its child claims are invalid.      At the deepest level in the DAG, a claim is invalid if there's a successful step against it.","params":{"_claimIndex":"The index of the subgame root claim to resolve.","_numToResolve":"The number of subgames to resolve in this call. If the input is `0`, and this is the first                      page, this function will attempt to check all of the subgame's children at once."}},"resolvedAt()":{"returns":{"resolvedAt_":"The timestamp that the DisputeGame contract was resolved at."}},"rootClaim()":{"details":"`clones-with-immutable-args` argument #2","returns":{"rootClaim_":"The root claim of the DisputeGame."}},"status()":{"returns":{"status_":"The current status of the game."}},"step(uint256,bool,bytes,bytes)":{"details":"This function should point to a fault proof processor in order to execute      a step in the fault proof program on-chain. The interface of the fault proof      processor contract should adhere to the `IBigStepper` interface.","params":{"_claimIndex":"The index of the challenged claim within `claimData`.","_isAttack":"Whether or not the step is an attack or a defense.","_proof":"Proof to access memory nodes in the VM's merkle state tree.","_stateData":"The stateData of the step is the preimage of the claim at the given        prestate, which is at `_stateIndex` if the move is an attack and `_claimIndex` if        the move is a defense. If the step is an attack on the first instruction, it is        the absolute prestate of the fault proof VM."}}},"version":1},"userdoc":{"kind":"user","methods":{"addLocalData(uint256,uint256,uint256)":{"notice":"Posts the requested local data to the VM's `PreimageOralce`."},"attack(bytes32,uint256,bytes32)":{"notice":"Attack a disagreed upon `Claim`."},"createdAt()":{"notice":"Returns the timestamp that the DisputeGame contract was created at."},"defend(bytes32,uint256,bytes32)":{"notice":"Defend an agreed upon `Claim`._disputed The `Claim` being defended."},"extraData()":{"notice":"Getter for the extra data."},"gameCreator()":{"notice":"Getter for the creator of the dispute game."},"gameData()":{"notice":"A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation."},"gameType()":{"notice":"Getter for the game type."},"getNumToResolve(uint256)":{"notice":"Returns the number of children that still need to be resolved in order to fully resolve a subgame rooted         at `_claimIndex`."},"initialize()":{"notice":"Initializes the contract."},"l1Head()":{"notice":"Getter for the parent hash of the L1 block when the dispute game was created."},"l2BlockNumber()":{"notice":"The l2BlockNumber of the disputed output root in the `L2OutputOracle`."},"resolve()":{"notice":"If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties."},"resolveClaim(uint256,uint256)":{"notice":"Resolves the subgame rooted at the given claim index. `_numToResolve` specifies how many children of         the subgame will be checked in this call. If `_numToResolve` is less than the number of children, an         internal cursor will be updated and this function may be called again to complete resolution of the         subgame."},"resolvedAt()":{"notice":"Returns the timestamp that the DisputeGame contract was resolved at."},"rootClaim()":{"notice":"Getter for the root claim."},"startingBlockNumber()":{"notice":"Only the starting block number of the game."},"startingOutputRoot()":{"notice":"Starting output root and block number of the game."},"startingRootHash()":{"notice":"Only the starting output root of the game."},"status()":{"notice":"Returns the current status of the game."},"step(uint256,bool,bytes,bytes)":{"notice":"Perform an instruction step via an on-chain fault proof processor."}},"version":1}},"settings":{"remappings":["@lib-keccak/=lib/lib-keccak/contracts/lib/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@rari-capital/solmate/=lib/solmate/","@solady-test/=lib/lib-keccak/lib/solady/test/","@solady/=lib/solady/src/","ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/","kontrol-cheatcodes/=lib/kontrol-cheatcodes/src/","lib-keccak/=lib/lib-keccak/contracts/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","safe-contracts/=lib/safe-contracts/contracts/","solady/=lib/solady/","solmate/=lib/solmate/src/"],"optimizer":{"enabled":true,"runs":999999},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"src/dispute/interfaces/IFaultDisputeGame.sol":"IFaultDisputeGame"},"evmVersion":"london","libraries":{}},"sources":{"src/dispute/interfaces/IDisputeGame.sol":{"keccak256":"0xa4d3617892dfee02890ea135e778ed0207aa8545c97cb2a421bae7c1a659baa0","urls":["bzz-raw://0e31653e3463dbc3f3b572ca4a1198d9aadc7d8606a2b690a58e2c082a0d0090","dweb:/ipfs/QmdbxJK4T5Hu652cSkxpAjYPxrK1i5ZM62oyopzmAzRn6M"],"license":"MIT"},"src/dispute/interfaces/IFaultDisputeGame.sol":{"keccak256":"0x9655abdda7d33496f012e5a8bf492c7733573024cc7779dc79fb4553f11e9f0a","urls":["bzz-raw://4f8f0acce831c36385a4b06a5142ddfc2dbe2e7c403193df2585293ef2821c03","dweb:/ipfs/QmR4XJ8rG1aiR7NgyTNbQ4swe8CFWkytudbWiKKMaqiCMH"],"license":"MIT"},"src/dispute/interfaces/IInitializable.sol":{"keccak256":"0xbc553af6501a972850a98fc6284943f8e95a5183a7b4f64198c16fca2338c9dc","urls":["bzz-raw://b1f1c422ce4a9e72f0bbdec36434206da4af3a32d38f922acab957942e994ce5","dweb:/ipfs/QmNQGWBceLxx1CKSMLfwTM584q8UCgUpF4rrFe8pdbWYtj"],"license":"MIT"},"src/dispute/lib/LibPosition.sol":{"keccak256":"0x7c5f19f8f54f06de2ce1c6cdcc5c7af65ac405130a4066cdaf146ca315818241","urls":["bzz-raw://06905e5ede94784e32748ad60557cb0b0829089d65430518e7042b80d2f64e2d","dweb:/ipfs/QmeGKMmnFnow2VrRvTSPavCrToqQ3qDpEaR1tVoK6Hzg8K"],"license":"MIT"},"src/dispute/lib/LibUDT.sol":{"keccak256":"0x02eef648a47889c21c8261101c99a491e8497f9f7d088b66dffa4ded6afd7855","urls":["bzz-raw://88001eed40a7dbbc5193d9671e1c05273dce1ab2a95bb866543421d2863ed04e","dweb:/ipfs/QmSNU8mFUFxhVdLBToL8r3v7tpugyvPDbDU4vkc3Xd4omX"],"license":"MIT"},"src/dispute/lib/Types.sol":{"keccak256":"0x5d6a2b87e0358d54bc22a8fdcfcd17e347bcfa69b774d9c75694e3f843c2c2a8","urls":["bzz-raw://df0ea07c78675e3fbfacdf92026ed77cd2b6596b358c09a7f29148b6aa80a6bd","dweb:/ipfs/QmaNVv9NQg1Ea6AoHvv1oZCVX2ZAuwoW5vBMf7cVMvayqC"],"license":"MIT"}},"version":1},"storageLayout":{"storage":[],"types":{}},"userdoc":{"version":1,"kind":"user","methods":{"addLocalData(uint256,uint256,uint256)":{"notice":"Posts the requested local data to the VM's `PreimageOralce`."},"attack(bytes32,uint256,bytes32)":{"notice":"Attack a disagreed upon `Claim`."},"createdAt()":{"notice":"Returns the timestamp that the DisputeGame contract was created at."},"defend(bytes32,uint256,bytes32)":{"notice":"Defend an agreed upon `Claim`._disputed The `Claim` being defended."},"extraData()":{"notice":"Getter for the extra data."},"gameCreator()":{"notice":"Getter for the creator of the dispute game."},"gameData()":{"notice":"A compliant implementation of this interface should return the components of the         game UUID's preimage provided in the cwia payload. The preimage of the UUID is         constructed as `keccak256(gameType . rootClaim . extraData)` where `.` denotes         concatenation."},"gameType()":{"notice":"Getter for the game type."},"getNumToResolve(uint256)":{"notice":"Returns the number of children that still need to be resolved in order to fully resolve a subgame rooted         at `_claimIndex`."},"initialize()":{"notice":"Initializes the contract."},"l1Head()":{"notice":"Getter for the parent hash of the L1 block when the dispute game was created."},"l2BlockNumber()":{"notice":"The l2BlockNumber of the disputed output root in the `L2OutputOracle`."},"resolve()":{"notice":"If all necessary information has been gathered, this function should mark the game         status as either `CHALLENGER_WINS` or `DEFENDER_WINS` and return the status of         the resolved game. It is at this stage that the bonds should be awarded to the         necessary parties."},"resolveClaim(uint256,uint256)":{"notice":"Resolves the subgame rooted at the given claim index. `_numToResolve` specifies how many children of         the subgame will be checked in this call. If `_numToResolve` is less than the number of children, an         internal cursor will be updated and this function may be called again to complete resolution of the         subgame."},"resolvedAt()":{"notice":"Returns the timestamp that the DisputeGame contract was resolved at."},"rootClaim()":{"notice":"Getter for the root claim."},"startingBlockNumber()":{"notice":"Only the starting block number of the game."},"startingOutputRoot()":{"notice":"Starting output root and block number of the game."},"startingRootHash()":{"notice":"Only the starting output root of the game."},"status()":{"notice":"Returns the current status of the game."},"step(uint256,bool,bytes,bytes)":{"notice":"Perform an instruction step via an on-chain fault proof processor."}},"events":{"Move(uint256,bytes32,address)":{"notice":"Emitted when a new claim is added to the DAG by `claimant`"},"Resolved(uint8)":{"notice":"Emitted when the game is resolved."}},"notice":"The interface for a fault proof backed dispute game."},"devdoc":{"version":1,"kind":"dev","methods":{"addLocalData(uint256,uint256,uint256)":{"params":{"_execLeafIdx":"The index of the leaf claim in an execution subgame that requires the local data for a step.","_ident":"The local identifier of the data to post.","_partOffset":"The offset of the data to post."}},"attack(bytes32,uint256,bytes32)":{"params":{"_claim":"The `Claim` at the relative attack position.","_disputed":"The `Claim` being attacked.","_parentIndex":"Index of the `Claim` to attack in the `claimData` array. This must match the `_disputed` claim."}},"createdAt()":{"returns":{"createdAt_":"The timestamp that the DisputeGame contract was created at."}},"defend(bytes32,uint256,bytes32)":{"params":{"_claim":"The `Claim` at the relative defense position.","_parentIndex":"Index of the claim to defend in the `claimData` array. This must match the `_disputed` claim."}},"extraData()":{"details":"`clones-with-immutable-args` argument #4","returns":{"extraData_":"Any extra data supplied to the dispute game contract by the creator."}},"gameCreator()":{"details":"`clones-with-immutable-args` argument #1","returns":{"creator_":"The creator of the dispute game."}},"gameData()":{"returns":{"extraData_":"Any extra data supplied to the dispute game contract by the creator.","gameType_":"The type of proof system being used.","rootClaim_":"The root claim of the DisputeGame."}},"gameType()":{"details":"The reference impl should be entirely different depending on the type (fault, validity)      i.e. The game type should indicate the security model.","returns":{"gameType_":"The type of proof system being used."}},"getNumToResolve(uint256)":{"params":{"_claimIndex":"The subgame root claim's index within `claimData`."},"returns":{"numRemainingChildren_":"The number of children that still need to be checked to resolve the subgame."}},"initialize()":{"details":"This function may only be called once."},"l1Head()":{"details":"`clones-with-immutable-args` argument #3","returns":{"l1Head_":"The parent hash of the L1 block when the dispute game was created."}},"resolve()":{"details":"May only be called if the `status` is `IN_PROGRESS`.","returns":{"status_":"The status of the game after resolution."}},"resolveClaim(uint256,uint256)":{"details":"This function must be called bottom-up in the DAG      A subgame is a tree of claims that has a maximum depth of 1.      A subgame root claims is valid if, and only if, all of its child claims are invalid.      At the deepest level in the DAG, a claim is invalid if there's a successful step against it.","params":{"_claimIndex":"The index of the subgame root claim to resolve.","_numToResolve":"The number of subgames to resolve in this call. If the input is `0`, and this is the first                      page, this function will attempt to check all of the subgame's children at once."}},"resolvedAt()":{"returns":{"resolvedAt_":"The timestamp that the DisputeGame contract was resolved at."}},"rootClaim()":{"details":"`clones-with-immutable-args` argument #2","returns":{"rootClaim_":"The root claim of the DisputeGame."}},"status()":{"returns":{"status_":"The current status of the game."}},"step(uint256,bool,bytes,bytes)":{"details":"This function should point to a fault proof processor in order to execute      a step in the fault proof program on-chain. The interface of the fault proof      processor contract should adhere to the `IBigStepper` interface.","params":{"_claimIndex":"The index of the challenged claim within `claimData`.","_isAttack":"Whether or not the step is an attack or a defense.","_proof":"Proof to access memory nodes in the VM's merkle state tree.","_stateData":"The stateData of the step is the preimage of the claim at the given        prestate, which is at `_stateIndex` if the move is an attack and `_claimIndex` if        the move is a defense. If the step is an attack on the first instruction, it is        the absolute prestate of the fault proof VM."}}},"events":{"Move(uint256,bytes32,address)":{"params":{"claim":"The claim being added","claimant":"The address of the claimant","parentIndex":"The index within the `claimData` array of the parent claim"}}},"title":"IFaultDisputeGame"},"ast":{"absolutePath":"src/dispute/interfaces/IFaultDisputeGame.sol","id":103625,"exportedSymbols":{"Claim":[104213],"Clock":[104121],"Duration":[104245],"GameId":[104175],"GameStatus":[104325],"GameType":[104305],"GameTypes":[104365],"Hash":[104260],"IDisputeGame":[103317],"IFaultDisputeGame":[103624],"LibClaim":[104243],"LibClock":[104173],"LibDuration":[104258],"LibGameId":[104211],"LibGameType":[104318],"LibHash":[104273],"LibPosition":[104084],"LibTimestamp":[104288],"LibVMStatus":[104303],"LocalPreimageKey":[104421],"OutputRoot":[104331],"Position":[103871],"Timestamp":[104275],"VMStatus":[104290],"VMStatuses":[104399]},"nodeType":"SourceUnit","src":"32:5606:179","nodes":[{"id":103489,"nodeType":"PragmaDirective","src":"32:23:179","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":103491,"nodeType":"ImportDirective","src":"57:50:179","nodes":[],"absolutePath":"src/dispute/interfaces/IDisputeGame.sol","file":"./IDisputeGame.sol","nameLocation":"-1:-1:-1","scope":103625,"sourceUnit":103318,"symbolAliases":[{"foreign":{"id":103490,"name":"IDisputeGame","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":103317,"src":"66:12:179","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":103492,"nodeType":"ImportDirective","src":"109:35:179","nodes":[],"absolutePath":"src/dispute/lib/Types.sol","file":"src/dispute/lib/Types.sol","nameLocation":"-1:-1:-1","scope":103625,"sourceUnit":104422,"symbolAliases":[],"unitAlias":""},{"id":103624,"nodeType":"ContractDefinition","src":"240:5397:179","nodes":[{"id":103513,"nodeType":"StructDefinition","src":"374:198:179","nodes":[],"canonicalName":"IFaultDisputeGame.ClaimData","members":[{"constant":false,"id":103497,"mutability":"mutable","name":"parentIndex","nameLocation":"408:11:179","nodeType":"VariableDeclaration","scope":103513,"src":"401:18:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":103496,"name":"uint32","nodeType":"ElementaryTypeName","src":"401:6:179","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":103499,"mutability":"mutable","name":"counteredBy","nameLocation":"437:11:179","nodeType":"VariableDeclaration","scope":103513,"src":"429:19:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":103498,"name":"address","nodeType":"ElementaryTypeName","src":"429:7:179","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":103501,"mutability":"mutable","name":"claimant","nameLocation":"466:8:179","nodeType":"VariableDeclaration","scope":103513,"src":"458:16:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":103500,"name":"address","nodeType":"ElementaryTypeName","src":"458:7:179","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":103503,"mutability":"mutable","name":"bond","nameLocation":"492:4:179","nodeType":"VariableDeclaration","scope":103513,"src":"484:12:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"},"typeName":{"id":103502,"name":"uint128","nodeType":"ElementaryTypeName","src":"484:7:179","typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"visibility":"internal"},{"constant":false,"id":103506,"mutability":"mutable","name":"claim","nameLocation":"512:5:179","nodeType":"VariableDeclaration","scope":103513,"src":"506:11:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Claim_$104213","typeString":"Claim"},"typeName":{"id":103505,"nodeType":"UserDefinedTypeName","pathNode":{"id":103504,"name":"Claim","nodeType":"IdentifierPath","referencedDeclaration":104213,"src":"506:5:179"},"referencedDeclaration":104213,"src":"506:5:179","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Claim_$104213","typeString":"Claim"}},"visibility":"internal"},{"constant":false,"id":103509,"mutability":"mutable","name":"position","nameLocation":"536:8:179","nodeType":"VariableDeclaration","scope":103513,"src":"527:17:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Position_$103871","typeString":"Position"},"typeName":{"id":103508,"nodeType":"UserDefinedTypeName","pathNode":{"id":103507,"name":"Position","nodeType":"IdentifierPath","referencedDeclaration":103871,"src":"527:8:179"},"referencedDeclaration":103871,"src":"527:8:179","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Position_$103871","typeString":"Position"}},"visibility":"internal"},{"constant":false,"id":103512,"mutability":"mutable","name":"clock","nameLocation":"560:5:179","nodeType":"VariableDeclaration","scope":103513,"src":"554:11:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Clock_$104121","typeString":"Clock"},"typeName":{"id":103511,"nodeType":"UserDefinedTypeName","pathNode":{"id":103510,"name":"Clock","nodeType":"IdentifierPath","referencedDeclaration":104121,"src":"554:5:179"},"referencedDeclaration":104121,"src":"554:5:179","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Clock_$104121","typeString":"Clock"}},"visibility":"internal"}],"name":"ClaimData","nameLocation":"381:9:179","scope":103624,"visibility":"public"},{"id":103523,"nodeType":"StructDefinition","src":"697:168:179","nodes":[],"canonicalName":"IFaultDisputeGame.ResolutionCheckpoint","members":[{"constant":false,"id":103515,"mutability":"mutable","name":"initialCheckpointComplete","nameLocation":"740:25:179","nodeType":"VariableDeclaration","scope":103523,"src":"735:30:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":103514,"name":"bool","nodeType":"ElementaryTypeName","src":"735:4:179","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":103517,"mutability":"mutable","name":"subgameIndex","nameLocation":"782:12:179","nodeType":"VariableDeclaration","scope":103523,"src":"775:19:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":103516,"name":"uint32","nodeType":"ElementaryTypeName","src":"775:6:179","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":103520,"mutability":"mutable","name":"leftmostPosition","nameLocation":"813:16:179","nodeType":"VariableDeclaration","scope":103523,"src":"804:25:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Position_$103871","typeString":"Position"},"typeName":{"id":103519,"nodeType":"UserDefinedTypeName","pathNode":{"id":103518,"name":"Position","nodeType":"IdentifierPath","referencedDeclaration":103871,"src":"804:8:179"},"referencedDeclaration":103871,"src":"804:8:179","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Position_$103871","typeString":"Position"}},"visibility":"internal"},{"constant":false,"id":103522,"mutability":"mutable","name":"counteredBy","nameLocation":"847:11:179","nodeType":"VariableDeclaration","scope":103523,"src":"839:19:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":103521,"name":"address","nodeType":"ElementaryTypeName","src":"839:7:179","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"ResolutionCheckpoint","nameLocation":"704:20:179","scope":103624,"visibility":"public"},{"id":103533,"nodeType":"EventDefinition","src":"1127:87:179","nodes":[],"anonymous":false,"documentation":{"id":103524,"nodeType":"StructuredDocumentation","src":"871:251:179","text":"@notice Emitted when a new claim is added to the DAG by `claimant`\n @param parentIndex The index within the `claimData` array of the parent claim\n @param claim The claim being added\n @param claimant The address of the claimant"},"eventSelector":"9b3245740ec3b155098a55be84957a4da13eaf7f14a8bc6f53126c0b9350f2be","name":"Move","nameLocation":"1133:4:179","parameters":{"id":103532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103526,"indexed":true,"mutability":"mutable","name":"parentIndex","nameLocation":"1154:11:179","nodeType":"VariableDeclaration","scope":103533,"src":"1138:27:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":103525,"name":"uint256","nodeType":"ElementaryTypeName","src":"1138:7:179","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":103529,"indexed":true,"mutability":"mutable","name":"claim","nameLocation":"1181:5:179","nodeType":"VariableDeclaration","scope":103533,"src":"1167:19:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Claim_$104213","typeString":"Claim"},"typeName":{"id":103528,"nodeType":"UserDefinedTypeName","pathNode":{"id":103527,"name":"Claim","nodeType":"IdentifierPath","referencedDeclaration":104213,"src":"1167:5:179"},"referencedDeclaration":104213,"src":"1167:5:179","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Claim_$104213","typeString":"Claim"}},"visibility":"internal"},{"constant":false,"id":103531,"indexed":true,"mutability":"mutable","name":"claimant","nameLocation":"1204:8:179","nodeType":"VariableDeclaration","scope":103533,"src":"1188:24:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":103530,"name":"address","nodeType":"ElementaryTypeName","src":"1188:7:179","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1137:76:179"}},{"id":103545,"nodeType":"FunctionDefinition","src":"1521:86:179","nodes":[],"documentation":{"id":103534,"nodeType":"StructuredDocumentation","src":"1220:296:179","text":"@notice Attack a disagreed upon `Claim`.\n @param _disputed The `Claim` being attacked.\n @param _parentIndex Index of the `Claim` to attack in the `claimData` array. This must match the `_disputed`\n claim.\n @param _claim The `Claim` at the relative attack position."},"functionSelector":"472777c6","implemented":false,"kind":"function","modifiers":[],"name":"attack","nameLocation":"1530:6:179","parameters":{"id":103543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103537,"mutability":"mutable","name":"_disputed","nameLocation":"1543:9:179","nodeType":"VariableDeclaration","scope":103545,"src":"1537:15:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Claim_$104213","typeString":"Claim"},"typeName":{"id":103536,"nodeType":"UserDefinedTypeName","pathNode":{"id":103535,"name":"Claim","nodeType":"IdentifierPath","referencedDeclaration":104213,"src":"1537:5:179"},"referencedDeclaration":104213,"src":"1537:5:179","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Claim_$104213","typeString":"Claim"}},"visibility":"internal"},{"constant":false,"id":103539,"mutability":"mutable","name":"_parentIndex","nameLocation":"1562:12:179","nodeType":"VariableDeclaration","scope":103545,"src":"1554:20:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":103538,"name":"uint256","nodeType":"ElementaryTypeName","src":"1554:7:179","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":103542,"mutability":"mutable","name":"_claim","nameLocation":"1582:6:179","nodeType":"VariableDeclaration","scope":103545,"src":"1576:12:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Claim_$104213","typeString":"Claim"},"typeName":{"id":103541,"nodeType":"UserDefinedTypeName","pathNode":{"id":103540,"name":"Claim","nodeType":"IdentifierPath","referencedDeclaration":104213,"src":"1576:5:179"},"referencedDeclaration":104213,"src":"1576:5:179","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Claim_$104213","typeString":"Claim"}},"visibility":"internal"}],"src":"1536:53:179"},"returnParameters":{"id":103544,"nodeType":"ParameterList","parameters":[],"src":"1606:0:179"},"scope":103624,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":103557,"nodeType":"FunctionDefinition","src":"1912:86:179","nodes":[],"documentation":{"id":103546,"nodeType":"StructuredDocumentation","src":"1613:294:179","text":"@notice Defend an agreed upon `Claim`.\n @notice _disputed The `Claim` being defended.\n @param _parentIndex Index of the claim to defend in the `claimData` array. This must match the `_disputed`\n claim.\n @param _claim The `Claim` at the relative defense position."},"functionSelector":"7b0f0adc","implemented":false,"kind":"function","modifiers":[],"name":"defend","nameLocation":"1921:6:179","parameters":{"id":103555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103549,"mutability":"mutable","name":"_disputed","nameLocation":"1934:9:179","nodeType":"VariableDeclaration","scope":103557,"src":"1928:15:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Claim_$104213","typeString":"Claim"},"typeName":{"id":103548,"nodeType":"UserDefinedTypeName","pathNode":{"id":103547,"name":"Claim","nodeType":"IdentifierPath","referencedDeclaration":104213,"src":"1928:5:179"},"referencedDeclaration":104213,"src":"1928:5:179","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Claim_$104213","typeString":"Claim"}},"visibility":"internal"},{"constant":false,"id":103551,"mutability":"mutable","name":"_parentIndex","nameLocation":"1953:12:179","nodeType":"VariableDeclaration","scope":103557,"src":"1945:20:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":103550,"name":"uint256","nodeType":"ElementaryTypeName","src":"1945:7:179","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":103554,"mutability":"mutable","name":"_claim","nameLocation":"1973:6:179","nodeType":"VariableDeclaration","scope":103557,"src":"1967:12:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Claim_$104213","typeString":"Claim"},"typeName":{"id":103553,"nodeType":"UserDefinedTypeName","pathNode":{"id":103552,"name":"Claim","nodeType":"IdentifierPath","referencedDeclaration":104213,"src":"1967:5:179"},"referencedDeclaration":104213,"src":"1967:5:179","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Claim_$104213","typeString":"Claim"}},"visibility":"internal"}],"src":"1927:53:179"},"returnParameters":{"id":103556,"nodeType":"ParameterList","parameters":[],"src":"1997:0:179"},"scope":103624,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":103569,"nodeType":"FunctionDefinition","src":"2927:110:179","nodes":[],"documentation":{"id":103558,"nodeType":"StructuredDocumentation","src":"2004:918:179","text":"@notice Perform an instruction step via an on-chain fault proof processor.\n @dev This function should point to a fault proof processor in order to execute\n      a step in the fault proof program on-chain. The interface of the fault proof\n      processor contract should adhere to the `IBigStepper` interface.\n @param _claimIndex The index of the challenged claim within `claimData`.\n @param _isAttack Whether or not the step is an attack or a defense.\n @param _stateData The stateData of the step is the preimage of the claim at the given\n        prestate, which is at `_stateIndex` if the move is an attack and `_claimIndex` if\n        the move is a defense. If the step is an attack on the first instruction, it is\n        the absolute prestate of the fault proof VM.\n @param _proof Proof to access memory nodes in the VM's merkle state tree."},"functionSelector":"d8cc1a3c","implemented":false,"kind":"function","modifiers":[],"name":"step","nameLocation":"2936:4:179","parameters":{"id":103567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103560,"mutability":"mutable","name":"_claimIndex","nameLocation":"2949:11:179","nodeType":"VariableDeclaration","scope":103569,"src":"2941:19:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":103559,"name":"uint256","nodeType":"ElementaryTypeName","src":"2941:7:179","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":103562,"mutability":"mutable","name":"_isAttack","nameLocation":"2967:9:179","nodeType":"VariableDeclaration","scope":103569,"src":"2962:14:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":103561,"name":"bool","nodeType":"ElementaryTypeName","src":"2962:4:179","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":103564,"mutability":"mutable","name":"_stateData","nameLocation":"2993:10:179","nodeType":"VariableDeclaration","scope":103569,"src":"2978:25:179","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":103563,"name":"bytes","nodeType":"ElementaryTypeName","src":"2978:5:179","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":103566,"mutability":"mutable","name":"_proof","nameLocation":"3020:6:179","nodeType":"VariableDeclaration","scope":103569,"src":"3005:21:179","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":103565,"name":"bytes","nodeType":"ElementaryTypeName","src":"3005:5:179","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2940:87:179"},"returnParameters":{"id":103568,"nodeType":"ParameterList","parameters":[],"src":"3036:0:179"},"scope":103624,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":103579,"nodeType":"FunctionDefinition","src":"3364:90:179","nodes":[],"documentation":{"id":103570,"nodeType":"StructuredDocumentation","src":"3043:316:179","text":"@notice Posts the requested local data to the VM's `PreimageOralce`.\n @param _ident The local identifier of the data to post.\n @param _execLeafIdx The index of the leaf claim in an execution subgame that requires the local data for a step.\n @param _partOffset The offset of the data to post."},"functionSelector":"f8f43ff6","implemented":false,"kind":"function","modifiers":[],"name":"addLocalData","nameLocation":"3373:12:179","parameters":{"id":103577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103572,"mutability":"mutable","name":"_ident","nameLocation":"3394:6:179","nodeType":"VariableDeclaration","scope":103579,"src":"3386:14:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":103571,"name":"uint256","nodeType":"ElementaryTypeName","src":"3386:7:179","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":103574,"mutability":"mutable","name":"_execLeafIdx","nameLocation":"3410:12:179","nodeType":"VariableDeclaration","scope":103579,"src":"3402:20:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":103573,"name":"uint256","nodeType":"ElementaryTypeName","src":"3402:7:179","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":103576,"mutability":"mutable","name":"_partOffset","nameLocation":"3432:11:179","nodeType":"VariableDeclaration","scope":103579,"src":"3424:19:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":103575,"name":"uint256","nodeType":"ElementaryTypeName","src":"3424:7:179","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3385:59:179"},"returnParameters":{"id":103578,"nodeType":"ParameterList","parameters":[],"src":"3453:0:179"},"scope":103624,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":103587,"nodeType":"FunctionDefinition","src":"4481:75:179","nodes":[],"documentation":{"id":103580,"nodeType":"StructuredDocumentation","src":"3460:1016:179","text":"@notice Resolves the subgame rooted at the given claim index. `_numToResolve` specifies how many children of\n         the subgame will be checked in this call. If `_numToResolve` is less than the number of children, an\n         internal cursor will be updated and this function may be called again to complete resolution of the\n         subgame.\n @dev This function must be called bottom-up in the DAG\n      A subgame is a tree of claims that has a maximum depth of 1.\n      A subgame root claims is valid if, and only if, all of its child claims are invalid.\n      At the deepest level in the DAG, a claim is invalid if there's a successful step against it.\n @param _claimIndex The index of the subgame root claim to resolve.\n @param _numToResolve The number of subgames to resolve in this call. If the input is `0`, and this is the first\n                      page, this function will attempt to check all of the subgame's children at once."},"functionSelector":"03c2924d","implemented":false,"kind":"function","modifiers":[],"name":"resolveClaim","nameLocation":"4490:12:179","parameters":{"id":103585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103582,"mutability":"mutable","name":"_claimIndex","nameLocation":"4511:11:179","nodeType":"VariableDeclaration","scope":103587,"src":"4503:19:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":103581,"name":"uint256","nodeType":"ElementaryTypeName","src":"4503:7:179","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":103584,"mutability":"mutable","name":"_numToResolve","nameLocation":"4532:13:179","nodeType":"VariableDeclaration","scope":103587,"src":"4524:21:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":103583,"name":"uint256","nodeType":"ElementaryTypeName","src":"4524:7:179","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4502:44:179"},"returnParameters":{"id":103586,"nodeType":"ParameterList","parameters":[],"src":"4555:0:179"},"scope":103624,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":103595,"nodeType":"FunctionDefinition","src":"4910:100:179","nodes":[],"documentation":{"id":103588,"nodeType":"StructuredDocumentation","src":"4562:343:179","text":"@notice Returns the number of children that still need to be resolved in order to fully resolve a subgame rooted\n         at `_claimIndex`.\n @param _claimIndex The subgame root claim's index within `claimData`.\n @return numRemainingChildren_ The number of children that still need to be checked to resolve the subgame."},"functionSelector":"5a5fa2d9","implemented":false,"kind":"function","modifiers":[],"name":"getNumToResolve","nameLocation":"4919:15:179","parameters":{"id":103591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103590,"mutability":"mutable","name":"_claimIndex","nameLocation":"4943:11:179","nodeType":"VariableDeclaration","scope":103595,"src":"4935:19:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":103589,"name":"uint256","nodeType":"ElementaryTypeName","src":"4935:7:179","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4934:21:179"},"returnParameters":{"id":103594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103593,"mutability":"mutable","name":"numRemainingChildren_","nameLocation":"4987:21:179","nodeType":"VariableDeclaration","scope":103595,"src":"4979:29:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":103592,"name":"uint256","nodeType":"ElementaryTypeName","src":"4979:7:179","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4978:31:179"},"scope":103624,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":103601,"nodeType":"FunctionDefinition","src":"5103:72:179","nodes":[],"documentation":{"id":103596,"nodeType":"StructuredDocumentation","src":"5016:82:179","text":"@notice The l2BlockNumber of the disputed output root in the `L2OutputOracle`."},"functionSelector":"8b85902b","implemented":false,"kind":"function","modifiers":[],"name":"l2BlockNumber","nameLocation":"5112:13:179","parameters":{"id":103597,"nodeType":"ParameterList","parameters":[],"src":"5125:2:179"},"returnParameters":{"id":103600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103599,"mutability":"mutable","name":"l2BlockNumber_","nameLocation":"5159:14:179","nodeType":"VariableDeclaration","scope":103601,"src":"5151:22:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":103598,"name":"uint256","nodeType":"ElementaryTypeName","src":"5151:7:179","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5150:24:179"},"scope":103624,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":103610,"nodeType":"FunctionDefinition","src":"5248:97:179","nodes":[],"documentation":{"id":103602,"nodeType":"StructuredDocumentation","src":"5181:62:179","text":"@notice Starting output root and block number of the game."},"functionSelector":"57da950e","implemented":false,"kind":"function","modifiers":[],"name":"startingOutputRoot","nameLocation":"5257:18:179","parameters":{"id":103603,"nodeType":"ParameterList","parameters":[],"src":"5275:2:179"},"returnParameters":{"id":103609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103606,"mutability":"mutable","name":"startingRoot_","nameLocation":"5306:13:179","nodeType":"VariableDeclaration","scope":103610,"src":"5301:18:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Hash_$104260","typeString":"Hash"},"typeName":{"id":103605,"nodeType":"UserDefinedTypeName","pathNode":{"id":103604,"name":"Hash","nodeType":"IdentifierPath","referencedDeclaration":104260,"src":"5301:4:179"},"referencedDeclaration":104260,"src":"5301:4:179","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Hash_$104260","typeString":"Hash"}},"visibility":"internal"},{"constant":false,"id":103608,"mutability":"mutable","name":"l2BlockNumber_","nameLocation":"5329:14:179","nodeType":"VariableDeclaration","scope":103610,"src":"5321:22:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":103607,"name":"uint256","nodeType":"ElementaryTypeName","src":"5321:7:179","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5300:44:179"},"scope":103624,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":103616,"nodeType":"FunctionDefinition","src":"5411:84:179","nodes":[],"documentation":{"id":103611,"nodeType":"StructuredDocumentation","src":"5351:55:179","text":"@notice Only the starting block number of the game."},"functionSelector":"70872aa5","implemented":false,"kind":"function","modifiers":[],"name":"startingBlockNumber","nameLocation":"5420:19:179","parameters":{"id":103612,"nodeType":"ParameterList","parameters":[],"src":"5439:2:179"},"returnParameters":{"id":103615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103614,"mutability":"mutable","name":"startingBlockNumber_","nameLocation":"5473:20:179","nodeType":"VariableDeclaration","scope":103616,"src":"5465:28:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":103613,"name":"uint256","nodeType":"ElementaryTypeName","src":"5465:7:179","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5464:30:179"},"scope":103624,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":103623,"nodeType":"FunctionDefinition","src":"5560:75:179","nodes":[],"documentation":{"id":103617,"nodeType":"StructuredDocumentation","src":"5501:54:179","text":"@notice Only the starting output root of the game."},"functionSelector":"25fc2ace","implemented":false,"kind":"function","modifiers":[],"name":"startingRootHash","nameLocation":"5569:16:179","parameters":{"id":103618,"nodeType":"ParameterList","parameters":[],"src":"5585:2:179"},"returnParameters":{"id":103622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103621,"mutability":"mutable","name":"startingRootHash_","nameLocation":"5616:17:179","nodeType":"VariableDeclaration","scope":103623,"src":"5611:22:179","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Hash_$104260","typeString":"Hash"},"typeName":{"id":103620,"nodeType":"UserDefinedTypeName","pathNode":{"id":103619,"name":"Hash","nodeType":"IdentifierPath","referencedDeclaration":104260,"src":"5611:4:179"},"referencedDeclaration":104260,"src":"5611:4:179","typeDescriptions":{"typeIdentifier":"t_userDefinedValueType$_Hash_$104260","typeString":"Hash"}},"visibility":"internal"}],"src":"5610:24:179"},"scope":103624,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":103494,"name":"IDisputeGame","nodeType":"IdentifierPath","referencedDeclaration":103317,"src":"271:12:179"},"id":103495,"nodeType":"InheritanceSpecifier","src":"271:12:179"}],"canonicalName":"IFaultDisputeGame","contractDependencies":[],"contractKind":"interface","documentation":{"id":103493,"nodeType":"StructuredDocumentation","src":"146:94:179","text":"@title IFaultDisputeGame\n @notice The interface for a fault proof backed dispute game."},"fullyImplemented":false,"linearizedBaseContracts":[103624,103317,103632],"name":"IFaultDisputeGame","nameLocation":"250:17:179","scope":103625,"usedErrors":[]}],"license":"MIT"},"id":179}