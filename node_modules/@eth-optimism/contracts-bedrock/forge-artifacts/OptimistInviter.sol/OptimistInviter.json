{"abi":[{"type":"constructor","inputs":[{"name":"_inviteGranter","type":"address","internalType":"address"},{"name":"_attestationStation","type":"address","internalType":"contract AttestationStation"}],"stateMutability":"nonpayable"},{"type":"function","name":"ATTESTATION_STATION","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract AttestationStation"}],"stateMutability":"view"},{"type":"function","name":"CAN_INVITE_ATTESTATION_KEY","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"CLAIMABLE_INVITE_TYPEHASH","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"EIP712_VERSION","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"INVITE_GRANTER","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"MIN_COMMITMENT_PERIOD","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"claimInvite","inputs":[{"name":"_claimer","type":"address","internalType":"address"},{"name":"_claimableInvite","type":"tuple","internalType":"struct OptimistInviter.ClaimableInvite","components":[{"name":"issuer","type":"address","internalType":"address"},{"name":"nonce","type":"bytes32","internalType":"bytes32"}]},{"name":"_signature","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"commitInvite","inputs":[{"name":"_commitment","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"commitmentTimestamps","inputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"initialize","inputs":[{"name":"_name","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"inviteCounts","inputs":[{"name":"","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"setInviteCounts","inputs":[{"name":"_accounts","type":"address[]","internalType":"address[]"},{"name":"_inviteCount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"usedNonces","inputs":[{"name":"","type":"address","internalType":"address"},{"name":"","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"version","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"event","name":"Initialized","inputs":[{"name":"version","type":"uint8","indexed":false,"internalType":"uint8"}],"anonymous":false},{"type":"event","name":"InviteClaimed","inputs":[{"name":"issuer","type":"address","indexed":true,"internalType":"address"},{"name":"claimer","type":"address","indexed":true,"internalType":"address"}],"anonymous":false}],"bytecode":{"object":"0x60c06040523480156200001157600080fd5b5060405162001ae838038062001ae8833981016040819052620000349162000065565b6001600160a01b039182166080521660a052620000a4565b6001600160a01b03811681146200006257600080fd5b50565b600080604083850312156200007957600080fd5b825162000086816200004c565b602084015190925062000099816200004c565b809150509250929050565b60805160a051611a0a620000de6000396000818161028b015281816106850152610c3601526000818160f401526103e80152611a0a6000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063916db22f1161008c578063db083d7111610066578063db083d7114610286578063de2dd221146102ad578063eccec5a8146102cd578063f62d18881461030957600080fd5b8063916db22f14610218578063b4245d731461023f578063c4fc453d1461025f57600080fd5b806350b414e6116100c857806350b414e61461016857806350eedbc21461017e57806354fd4d50146101915780635fda04c7146101da57600080fd5b806314b47241146100ef578063187e3cd11461014057806325b27a3d14610155575b600080fd5b6101167f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61015361014e3660046114b3565b61031c565b005b6101536101633660046114cc565b6103d0565b610170603c81565b604051908152602001610137565b61015361018c366004611633565b6106f3565b6101cd6040518060400160405280600581526020017f312e312e3000000000000000000000000000000000000000000000000000000081525081565b6040516101379190611749565b6102086101e836600461175c565b603660209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610137565b6101707f6f7074696d6973742e63616e2d696e766974650000000000000000000000000081565b61017061024d3660046114b3565b60356020526000908152604090205481565b6101707f6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce81565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6101706102bb366004611786565b60376020526000908152604090205481565b6101cd6040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b6101536103173660046117a1565b610d7c565b600081815260356020526040902054156103bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4f7074696d697374496e76697465723a20636f6d6d69746d656e7420616c726560448201527f616479206d61646500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000908152603560205260409020429055565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610495576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f4f7074696d697374496e76697465723a206f6e6c7920696e766974652067726160448201527f6e7465722063616e206772616e7420696e76697465730000000000000000000060648201526084016103b4565b8160008167ffffffffffffffff8111156104b1576104b1611570565b6040519080825280602002602001820160405280156104fe57816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816104cf5790505b50905060005b82811015610647578360376000888885818110610523576105236117f2565b90506020020160208101906105389190611786565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506040518060600160405280878784818110610593576105936117f2565b90506020020160208101906105a89190611786565b73ffffffffffffffffffffffffffffffffffffffff1681526020017f6f7074696d6973742e63616e2d696e766974650000000000000000000000000081526020016040518060400160405280600481526020017f7472756500000000000000000000000000000000000000000000000000000000815250815250828281518110610634576106346117f2565b6020908102919091010152600101610504565b506040517f5eb5ea1000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635eb5ea10906106ba908490600401611821565b600060405180830381600087803b1580156106d457600080fd5b505af11580156106e8573d6000803e3d6000fd5b505050505050505050565b600060356000858460405160200161070c9291906118d4565b604051602081830303815290604052805190602001208152602001908152602001600020549050600081116107e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f4f7074696d697374496e76697465723a20636c61696d657220616e642073696760448201527f6e61747572652068617665206e6f74206265656e20636f6d6d6974746564207960648201527f6574000000000000000000000000000000000000000000000000000000000000608482015260a4016103b4565b426107f5603c83611903565b1115610883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f4f7074696d697374496e76697465723a206d696e696d756d20636f6d6d69746d60448201527f656e7420706572696f6420686173206e6f7420656c617073656420796574000060648201526084016103b4565b60006109067f6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce6108b66020870187611786565b6040805160208181019490945273ffffffffffffffffffffffffffffffffffffffff9092169082015290860135606082015260800160405160208183030381529060405280519060200120610f46565b905061091f6109186020860186611786565b8285610fb5565b6109ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4f7074696d697374496e76697465723a20696e76616c6964207369676e61747560448201527f726500000000000000000000000000000000000000000000000000000000000060648201526084016103b4565b603660006109bc6020870187611786565b73ffffffffffffffffffffffffffffffffffffffff1681526020808201929092526040908101600090812087840135825290925290205460ff1615610a83576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4f7074696d697374496e76697465723a206e6f6e63652068617320616c72656160448201527f6479206265656e2075736564000000000000000000000000000000000000000060648201526084016103b4565b600160366000610a966020880188611786565b73ffffffffffffffffffffffffffffffffffffffff1681526020808201929092526040908101600090812088840180358352935290812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016931515939093179092556037908290610b0a9088611786565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610bd2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f7074696d697374496e76697465723a2069737375657220686173206e6f206960448201527f6e7669746573000000000000000000000000000000000000000000000000000060648201526084016103b4565b60376000610be36020870187611786565b73ffffffffffffffffffffffffffffffffffffffff9081168252602080830193909352604090910160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190557f0000000000000000000000000000000000000000000000000000000000000000169063702b9dee9087907f6f7074696d6973742e63616e2d6d696e742d66726f6d2d696e7669746500000090610c8d90890189611786565b6040805173ffffffffffffffffffffffffffffffffffffffff9092166020830152016040516020818303038152906040526040518463ffffffff1660e01b8152600401610cdc93929190611942565b600060405180830381600087803b158015610cf657600080fd5b505af1158015610d0a573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff86169050610d336020860186611786565b73ffffffffffffffffffffffffffffffffffffffff167f745d3c5bc92ab40b418069bf8f8e2030807effceb88bbaa07ee01574f16be47560405160405180910390a35050505050565b600054610100900460ff1615808015610d9c5750600054600160ff909116105b80610db65750303b158015610db6575060005460ff166001145b610e42576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103b4565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610ea057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610edf826040518060400160405280600581526020017f312e302e30000000000000000000000000000000000000000000000000000000815250611184565b8015610f4257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6000610faf610f53611225565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b6000806000610fc485856112a5565b90925090506000816004811115610fdd57610fdd611980565b14801561101557508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156110255760019250505061117d565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b888860405160240161105a9291906119af565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516110e391906119c8565b600060405180830381855afa9150503d806000811461111e576040519150601f19603f3d011682016040523d82523d6000602084013e611123565b606091505b5091509150818015611136575080516020145b8015611176575080517f1626ba7e000000000000000000000000000000000000000000000000000000009061117490830160209081019084016119e4565b145b9450505050505b9392505050565b600054610100900460ff1661121b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103b4565b610f4282826112ea565b60006112a07f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61125460015490565b6002546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b905090565b60008082516041036112db5760208301516040840151606085015160001a6112cf8782858561139b565b945094505050506112e3565b506000905060025b9250929050565b600054610100900460ff16611381576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103b4565b815160209283012081519190920120600191909155600255565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156113d257506000905060036114aa565b8460ff16601b141580156113ea57508460ff16601c14155b156113fb57506000905060046114aa565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561144f573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166114a3576000600192509250506114aa565b9150600090505b94509492505050565b6000602082840312156114c557600080fd5b5035919050565b6000806000604084860312156114e157600080fd5b833567ffffffffffffffff808211156114f957600080fd5b818601915086601f83011261150d57600080fd5b81358181111561151c57600080fd5b8760208260051b850101111561153157600080fd5b6020928301989097509590910135949350505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461156b57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600067ffffffffffffffff808411156115ba576115ba611570565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561160057611600611570565b8160405280935085815286868601111561161957600080fd5b858560208301376000602087830101525050509392505050565b6000806000838503608081121561164957600080fd5b61165285611547565b935060407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08201121561168457600080fd5b50602084019150606084013567ffffffffffffffff8111156116a557600080fd5b8401601f810186136116b657600080fd5b6116c58682356020840161159f565b9150509250925092565b60005b838110156116ea5781810151838201526020016116d2565b838111156116f9576000848401525b50505050565b600081518084526117178160208601602086016116cf565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061117d60208301846116ff565b6000806040838503121561176f57600080fd5b61177883611547565b946020939093013593505050565b60006020828403121561179857600080fd5b61117d82611547565b6000602082840312156117b357600080fd5b813567ffffffffffffffff8111156117ca57600080fd5b8201601f810184136117db57600080fd5b6117ea8482356020840161159f565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156118c6578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805173ffffffffffffffffffffffffffffffffffffffff168452878101518885015286015160608785018190526118b2818601836116ff565b968901969450505090860190600101611848565b509098975050505050505050565b73ffffffffffffffffffffffffffffffffffffffff831681526040602082015260006117ea60408301846116ff565b6000821982111561193d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b73ffffffffffffffffffffffffffffffffffffffff8416815282602082015260606040820152600061197760608301846116ff565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8281526040602082015260006117ea60408301846116ff565b600082516119da8184602087016116cf565b9190910192915050565b6000602082840312156119f657600080fd5b505191905056fea164736f6c634300080f000a","sourceMap":"2147:10951:233:-:0;;;5499:175;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5585:31:233;;;;;5626:41;;;2147:10951;;14:131:383;-1:-1:-1;;;;;89:31:383;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:414::-;258:6;266;319:2;307:9;298:7;294:23;290:32;287:52;;;335:1;332;325:12;287:52;367:9;361:16;386:31;411:5;386:31;:::i;:::-;486:2;471:18;;465:25;436:5;;-1:-1:-1;499:33:383;465:25;499:33;:::i;:::-;551:7;541:17;;;150:414;;;;;:::o;:::-;2147:10951:233;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063916db22f1161008c578063db083d7111610066578063db083d7114610286578063de2dd221146102ad578063eccec5a8146102cd578063f62d18881461030957600080fd5b8063916db22f14610218578063b4245d731461023f578063c4fc453d1461025f57600080fd5b806350b414e6116100c857806350b414e61461016857806350eedbc21461017e57806354fd4d50146101915780635fda04c7146101da57600080fd5b806314b47241146100ef578063187e3cd11461014057806325b27a3d14610155575b600080fd5b6101167f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61015361014e3660046114b3565b61031c565b005b6101536101633660046114cc565b6103d0565b610170603c81565b604051908152602001610137565b61015361018c366004611633565b6106f3565b6101cd6040518060400160405280600581526020017f312e312e3000000000000000000000000000000000000000000000000000000081525081565b6040516101379190611749565b6102086101e836600461175c565b603660209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610137565b6101707f6f7074696d6973742e63616e2d696e766974650000000000000000000000000081565b61017061024d3660046114b3565b60356020526000908152604090205481565b6101707f6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce81565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6101706102bb366004611786565b60376020526000908152604090205481565b6101cd6040518060400160405280600581526020017f312e302e3000000000000000000000000000000000000000000000000000000081525081565b6101536103173660046117a1565b610d7c565b600081815260356020526040902054156103bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f4f7074696d697374496e76697465723a20636f6d6d69746d656e7420616c726560448201527f616479206d61646500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000908152603560205260409020429055565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610495576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f4f7074696d697374496e76697465723a206f6e6c7920696e766974652067726160448201527f6e7465722063616e206772616e7420696e76697465730000000000000000000060648201526084016103b4565b8160008167ffffffffffffffff8111156104b1576104b1611570565b6040519080825280602002602001820160405280156104fe57816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816104cf5790505b50905060005b82811015610647578360376000888885818110610523576105236117f2565b90506020020160208101906105389190611786565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506040518060600160405280878784818110610593576105936117f2565b90506020020160208101906105a89190611786565b73ffffffffffffffffffffffffffffffffffffffff1681526020017f6f7074696d6973742e63616e2d696e766974650000000000000000000000000081526020016040518060400160405280600481526020017f7472756500000000000000000000000000000000000000000000000000000000815250815250828281518110610634576106346117f2565b6020908102919091010152600101610504565b506040517f5eb5ea1000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690635eb5ea10906106ba908490600401611821565b600060405180830381600087803b1580156106d457600080fd5b505af11580156106e8573d6000803e3d6000fd5b505050505050505050565b600060356000858460405160200161070c9291906118d4565b604051602081830303815290604052805190602001208152602001908152602001600020549050600081116107e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f4f7074696d697374496e76697465723a20636c61696d657220616e642073696760448201527f6e61747572652068617665206e6f74206265656e20636f6d6d6974746564207960648201527f6574000000000000000000000000000000000000000000000000000000000000608482015260a4016103b4565b426107f5603c83611903565b1115610883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f4f7074696d697374496e76697465723a206d696e696d756d20636f6d6d69746d60448201527f656e7420706572696f6420686173206e6f7420656c617073656420796574000060648201526084016103b4565b60006109067f6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce6108b66020870187611786565b6040805160208181019490945273ffffffffffffffffffffffffffffffffffffffff9092169082015290860135606082015260800160405160208183030381529060405280519060200120610f46565b905061091f6109186020860186611786565b8285610fb5565b6109ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4f7074696d697374496e76697465723a20696e76616c6964207369676e61747560448201527f726500000000000000000000000000000000000000000000000000000000000060648201526084016103b4565b603660006109bc6020870187611786565b73ffffffffffffffffffffffffffffffffffffffff1681526020808201929092526040908101600090812087840135825290925290205460ff1615610a83576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4f7074696d697374496e76697465723a206e6f6e63652068617320616c72656160448201527f6479206265656e2075736564000000000000000000000000000000000000000060648201526084016103b4565b600160366000610a966020880188611786565b73ffffffffffffffffffffffffffffffffffffffff1681526020808201929092526040908101600090812088840180358352935290812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016931515939093179092556037908290610b0a9088611786565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610bd2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f7074696d697374496e76697465723a2069737375657220686173206e6f206960448201527f6e7669746573000000000000000000000000000000000000000000000000000060648201526084016103b4565b60376000610be36020870187611786565b73ffffffffffffffffffffffffffffffffffffffff9081168252602080830193909352604090910160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190557f0000000000000000000000000000000000000000000000000000000000000000169063702b9dee9087907f6f7074696d6973742e63616e2d6d696e742d66726f6d2d696e7669746500000090610c8d90890189611786565b6040805173ffffffffffffffffffffffffffffffffffffffff9092166020830152016040516020818303038152906040526040518463ffffffff1660e01b8152600401610cdc93929190611942565b600060405180830381600087803b158015610cf657600080fd5b505af1158015610d0a573d6000803e3d6000fd5b50505073ffffffffffffffffffffffffffffffffffffffff86169050610d336020860186611786565b73ffffffffffffffffffffffffffffffffffffffff167f745d3c5bc92ab40b418069bf8f8e2030807effceb88bbaa07ee01574f16be47560405160405180910390a35050505050565b600054610100900460ff1615808015610d9c5750600054600160ff909116105b80610db65750303b158015610db6575060005460ff166001145b610e42576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016103b4565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610ea057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610edf826040518060400160405280600581526020017f312e302e30000000000000000000000000000000000000000000000000000000815250611184565b8015610f4257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6000610faf610f53611225565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b92915050565b6000806000610fc485856112a5565b90925090506000816004811115610fdd57610fdd611980565b14801561101557508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156110255760019250505061117d565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b888860405160240161105a9291906119af565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516110e391906119c8565b600060405180830381855afa9150503d806000811461111e576040519150601f19603f3d011682016040523d82523d6000602084013e611123565b606091505b5091509150818015611136575080516020145b8015611176575080517f1626ba7e000000000000000000000000000000000000000000000000000000009061117490830160209081019084016119e4565b145b9450505050505b9392505050565b600054610100900460ff1661121b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103b4565b610f4282826112ea565b60006112a07f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61125460015490565b6002546040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b905090565b60008082516041036112db5760208301516040840151606085015160001a6112cf8782858561139b565b945094505050506112e3565b506000905060025b9250929050565b600054610100900460ff16611381576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016103b4565b815160209283012081519190920120600191909155600255565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156113d257506000905060036114aa565b8460ff16601b141580156113ea57508460ff16601c14155b156113fb57506000905060046114aa565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561144f573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166114a3576000600192509250506114aa565b9150600090505b94509492505050565b6000602082840312156114c557600080fd5b5035919050565b6000806000604084860312156114e157600080fd5b833567ffffffffffffffff808211156114f957600080fd5b818601915086601f83011261150d57600080fd5b81358181111561151c57600080fd5b8760208260051b850101111561153157600080fd5b6020928301989097509590910135949350505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461156b57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600067ffffffffffffffff808411156115ba576115ba611570565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561160057611600611570565b8160405280935085815286868601111561161957600080fd5b858560208301376000602087830101525050509392505050565b6000806000838503608081121561164957600080fd5b61165285611547565b935060407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08201121561168457600080fd5b50602084019150606084013567ffffffffffffffff8111156116a557600080fd5b8401601f810186136116b657600080fd5b6116c58682356020840161159f565b9150509250925092565b60005b838110156116ea5781810151838201526020016116d2565b838111156116f9576000848401525b50505050565b600081518084526117178160208601602086016116cf565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061117d60208301846116ff565b6000806040838503121561176f57600080fd5b61177883611547565b946020939093013593505050565b60006020828403121561179857600080fd5b61117d82611547565b6000602082840312156117b357600080fd5b813567ffffffffffffffff8111156117ca57600080fd5b8201601f810184136117db57600080fd5b6117ea8482356020840161159f565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156118c6578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00185528151805173ffffffffffffffffffffffffffffffffffffffff168452878101518885015286015160608785018190526118b2818601836116ff565b968901969450505090860190600101611848565b509098975050505050505050565b73ffffffffffffffffffffffffffffffffffffffff831681526040602082015260006117ea60408301846116ff565b6000821982111561193d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b73ffffffffffffffffffffffffffffffffffffffff8416815282602082015260606040820152600061197760608301846116ff565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8281526040602082015260006117ea60408301846116ff565b600082516119da8184602087016116cf565b9190910192915050565b6000602082840312156119f657600080fd5b505191905056fea164736f6c634300080f000a","sourceMap":"2147:10951:233:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3304:39;;;;;;;;190:42:383;178:55;;;160:74;;148:2;133:18;3304:39:233;;;;;;;;8634:500;;;;;;:::i;:::-;;:::i;:::-;;6503:985;;;;;;:::i;:::-;;:::i;4051:50::-;;4099:2;4051:50;;;;;1270:25:383;;;1258:2;1243:18;4051:50:233;1124:177:383;10204:2892:233;;;;;;:::i;:::-;;:::i;5307:40::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;5053:62::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4379:14:383;;4372:22;4354:41;;4342:2;4327:18;5053:62:233;4214:187:383;3153:83:233;;3206:30;3153:83;;4906:55;;;;;;:::i;:::-;;;;;;;;;;;;;;2942:110;;2994:58;2942:110;;3410:55;;;;;5190:47;;;;;;:::i;:::-;;;;;;;;;;;;;;2826;;;;;;;;;;;;;;;;;;;;;6163:113;;;;;;:::i;:::-;;:::i;8634:500::-;8982:33;;;;:20;:33;;;;;;:38;8974:91;;;;;;;5696:2:383;8974:91:233;;;5678:21:383;5735:2;5715:18;;;5708:30;5774:34;5754:18;;;5747:62;5845:10;5825:18;;;5818:38;5873:19;;8974:91:233;;;;;;;;;9076:33;;;;:20;:33;;;;;9112:15;9076:51;;8634:500::o;6503:985::-;6654:10;:28;6668:14;6654:28;;6646:95;;;;;;;6105:2:383;6646:95:233;;;6087:21:383;6144:2;6124:18;;;6117:30;6183:34;6163:18;;;6156:62;6254:24;6234:18;;;6227:52;6296:19;;6646:95:233;5903:418:383;6646:95:233;6769:9;6752:14;6769:9;6855:48;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;6855:48:233;;;;;;;;;;;;;;;;6796:107;;6919:9;6914:517;6934:6;6930:1;:10;6914:517;;;7046:12;7017;:26;7030:9;;7040:1;7030:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;7017:26;;;;;;;;;;;;;;;:41;;;;7188:172;;;;;;;;7248:9;;7258:1;7248:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;7188:172;;;;;;3206:30;7188:172;;;;7332:13;;;;;;;;;;;;;;;;;7188:172;;;7170:12;7183:1;7170:15;;;;;;;;:::i;:::-;;;;;;;;;;:190;7403:3;;6914:517;;;-1:-1:-1;7441:40:233;;;;;:26;:19;:26;;;;:40;;7468:12;;7441:40;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6587:901;;6503:985;;;:::o;10204:2892::-;10328:27;10358:20;:65;10400:8;10410:10;10389:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;10379:43;;;;;;10358:65;;;;;;;;;;;;10328:95;;10532:1;10510:19;:23;10502:102;;;;;;;8303:2:383;10502:102:233;;;8285:21:383;8342:2;8322:18;;;8315:30;8381:34;8361:18;;;8354:62;8452:34;8432:18;;;8425:62;8524:4;8503:19;;;8496:33;8546:19;;10502:102:233;8101:470:383;10502:102:233;10769:15;10722:43;4099:2;10722:19;:43;:::i;:::-;:62;;10701:171;;;;;;;9065:2:383;10701:171:233;;;9047:21:383;9104:2;9084:18;;;9077:30;9143:34;9123:18;;;9116:62;9214:32;9194:18;;;9187:60;9264:19;;10701:171:233;8863:426:383;10701:171:233;10962:14;10979:137;2994:58;11057:23;;;;:16;:23;:::i;:::-;11019:86;;;11082:22;11019:86;;;9496:25:383;;;;9569:42;9557:55;;;9537:18;;;9530:83;11082:22:233;;;;9629:18:383;;;9622:34;9469:18;;11019:86:233;;;;;;;;;;;;11009:97;;;;;;10979:16;:137::i;:::-;10962:154;-1:-1:-1;11506:81:233;11543:23;;;;:16;:23;:::i;:::-;11568:6;11576:10;11506:36;:81::i;:::-;11485:162;;;;;;;9869:2:383;11485:162:233;;;9851:21:383;9908:2;9888:18;;;9881:30;9947:34;9927:18;;;9920:62;10018:4;9998:18;;;9991:32;10040:19;;11485:162:233;9667:398:383;11485:162:233;11975:10;:35;11986:23;;;;:16;:23;:::i;:::-;11975:35;;;;;;;;;;;;;;;;-1:-1:-1;11975:35:233;;;12011:22;;;;11975:59;;;;;;;;;;:68;11954:159;;;;;;;10272:2:383;11954:159:233;;;10254:21:383;10311:2;10291:18;;;10284:30;10350:34;10330:18;;;10323:62;10421:14;10401:18;;;10394:42;10453:19;;11954:159:233;10070:408:383;11954:159:233;12265:4;12203:10;:35;12214:23;;;;:16;:23;:::i;:::-;12203:35;;;;;;;;;;;;;;;;-1:-1:-1;12203:35:233;;;12239:22;;;;;12203:59;;;;;;;:66;;;;;;;;;;;;;;12383:12;;-1:-1:-1;;12396:23:233;;12239:22;12396:23;:::i;:::-;12383:37;;;;;;;;;;;;;;;;:41;12375:92;;;;;;;10685:2:383;12375:92:233;;;10667:21:383;10724:2;10704:18;;;10697:30;10763:34;10743:18;;;10736:62;10834:8;10814:18;;;10807:36;10860:19;;12375:92:233;10483:402:383;12375:92:233;12624:12;:37;12637:23;;;;:16;:23;:::i;:::-;12624:37;;;;;;;;;;;;;;;;;;-1:-1:-1;12624:37:233;12622:39;;;;;;12841:19;:26;;;;12881:8;;388:40:234;;12991:23:233;;;;:16;:23;:::i;:::-;12980:35;;;190:42:383;178:55;;;12980:35:233;;;160:74:383;133:18;12980:35:233;;;;;;;;;;;;12841:184;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;13041:48:233;;;;-1:-1:-1;13055:23:233;;;;;;:::i;:::-;13041:48;;;;;;;;;;;;10318:2778;;10204:2892;;;:::o;6163:113::-;3111:19:27;3134:13;;;;;;3133:14;;3179:34;;;;-1:-1:-1;3197:12:27;;3212:1;3197:12;;;;:16;3179:34;3178:108;;;-1:-1:-1;3258:4:27;1476:19:33;:23;;;3219:66:27;;-1:-1:-1;3268:12:27;;;;;:17;3219:66;3157:201;;;;;;;11506:2:383;3157:201:27;;;11488:21:383;11545:2;11525:18;;;11518:30;11584:34;11564:18;;;11557:62;11655:16;11635:18;;;11628:44;11689:19;;3157:201:27;11304:410:383;3157:201:27;3368:12;:16;;;;3383:1;3368:16;;;3394:65;;;;3428:13;:20;;;;;;;;3394:65;6233:36:233::1;6247:5;6254:14;;;;;;;;;;;;;;;;::::0;6233:13:::1;:36::i;:::-;3483:14:27::0;3479:99;;;3529:5;3513:21;;;;;;3553:14;;-1:-1:-1;11871:36:383;;3553:14:27;;11859:2:383;11844:18;3553:14:27;;;;;;;3479:99;3101:483;6163:113:233;:::o;3890:176:37:-;3967:7;3993:66;4026:20;:18;:20::i;:::-;4048:10;8710:57:36;;13551:66:383;8710:57:36;;;13539:79:383;13634:11;;;13627:27;;;13670:12;;;13663:28;;;8674:7:36;;13707:12:383;;8710:57:36;;;;;;;;;;;;8700:68;;;;;;8693:75;;8581:194;;;;;3993:66:37;3986:73;3890:176;-1:-1:-1;;3890:176:37:o;1039:667:64:-;1175:4;1192:17;1211:24;1239:33;1256:4;1262:9;1239:16;:33::i;:::-;1191:81;;-1:-1:-1;1191:81:64;-1:-1:-1;1295:26:64;1286:5;:35;;;;;;;;:::i;:::-;;:58;;;;;1338:6;1325:19;;:9;:19;;;1286:58;1282:100;;;1367:4;1360:11;;;;;;1282:100;1393:12;1407:19;1430:6;:17;;1484:34;;;1520:4;1526:9;1461:75;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1430:116;;;;1461:75;1430:116;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1392:154;;;;1564:7;:42;;;;;1587:6;:13;1604:2;1587:19;1564:42;:134;;;;-1:-1:-1;1622:29:64;;1663:34;;1622:29;;;;;;;;;;;;:::i;:::-;:76;1564:134;1556:143;;;;;;1039:667;;;;;;:::o;2306:147:37:-;4910:13:27;;;;;;;4902:69;;;;;;;13071:2:383;4902:69:27;;;13053:21:383;13110:2;13090:18;;;13083:30;13149:34;13129:18;;;13122:62;13220:13;13200:18;;;13193:41;13251:19;;4902:69:27;12869:407:383;4902:69:27;2408:38:37::1;2432:4;2438:7;2408:23;:38::i;2842:160::-:0;2895:7;2921:74;1595:95;2955:17;4386:12;;;4302:103;2955:17;4731:15;;3184:73;;;;;;13989:25:383;;;14030:18;;;14023:34;;;14073:18;;;14066:34;;;3228:13:37;14116:18:383;;;14109:34;3251:4:37;14159:19:383;;;14152:84;3148:7:37;;13961:19:383;;3184:73:37;;;;;;;;;;;;3174:84;;;;;;3167:91;;3008:257;;;;;;2921:74;2914:81;;2842:160;:::o;2243:730:63:-;2324:7;2333:12;2361:9;:16;2381:2;2361:22;2357:610;;2697:4;2682:20;;2676:27;2746:4;2731:20;;2725:27;2803:4;2788:20;;2782:27;2399:9;2774:36;2844:25;2855:4;2774:36;2676:27;2725;2844:10;:25::i;:::-;2837:32;;;;;;;;;2357:610;-1:-1:-1;2916:1:63;;-1:-1:-1;2920:35:63;2357:610;2243:730;;;;;:::o;2459:297:37:-;4910:13:27;;;;;;;4902:69;;;;;;;13071:2:383;4902:69:27;;;13053:21:383;13110:2;13090:18;;;13083:30;13149:34;13129:18;;;13122:62;13220:13;13200:18;;;13193:41;13251:19;;4902:69:27;12869:407:383;4902:69:27;2592:22:37;;::::1;::::0;;::::1;::::0;2648:25;;;;;::::1;::::0;2683:12:::1;:25:::0;;;;2718:15:::1;:31:::0;2459:297::o;5167:1603:63:-;5293:7;;6217:66;6204:79;;6200:161;;;-1:-1:-1;6315:1:63;;-1:-1:-1;6319:30:63;6299:51;;6200:161;6374:1;:7;;6379:2;6374:7;;:18;;;;;6385:1;:7;;6390:2;6385:7;;6374:18;6370:100;;;-1:-1:-1;6424:1:63;;-1:-1:-1;6428:30:63;6408:51;;6370:100;6581:24;;;6564:14;6581:24;;;;;;;;;14474:25:383;;;14547:4;14535:17;;14515:18;;;14508:45;;;;14569:18;;;14562:34;;;14612:18;;;14605:34;;;6581:24:63;;14446:19:383;;6581:24:63;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6581:24:63;;;;;;-1:-1:-1;;6619:20:63;;;6615:101;;6671:1;6675:29;6655:50;;;;;;;6615:101;6734:6;-1:-1:-1;6742:20:63;;-1:-1:-1;5167:1603:63;;;;;;;;:::o;245:180:383:-;304:6;357:2;345:9;336:7;332:23;328:32;325:52;;;373:1;370;363:12;325:52;-1:-1:-1;396:23:383;;245:180;-1:-1:-1;245:180:383:o;430:689::-;525:6;533;541;594:2;582:9;573:7;569:23;565:32;562:52;;;610:1;607;600:12;562:52;650:9;637:23;679:18;720:2;712:6;709:14;706:34;;;736:1;733;726:12;706:34;774:6;763:9;759:22;749:32;;819:7;812:4;808:2;804:13;800:27;790:55;;841:1;838;831:12;790:55;881:2;868:16;907:2;899:6;896:14;893:34;;;923:1;920;913:12;893:34;978:7;971:4;961:6;958:1;954:14;950:2;946:23;942:34;939:47;936:67;;;999:1;996;989:12;936:67;1030:4;1022:13;;;;1054:6;;-1:-1:-1;1092:20:383;;;;1079:34;;430:689;-1:-1:-1;;;;430:689:383:o;1306:196::-;1374:20;;1434:42;1423:54;;1413:65;;1403:93;;1492:1;1489;1482:12;1403:93;1306:196;;;:::o;1507:184::-;1559:77;1556:1;1549:88;1656:4;1653:1;1646:15;1680:4;1677:1;1670:15;1696:690;1760:5;1790:18;1831:2;1823:6;1820:14;1817:40;;;1837:18;;:::i;:::-;1971:2;1965:9;2037:2;2025:15;;1876:66;2021:24;;;2047:2;2017:33;2013:42;2001:55;;;2071:18;;;2091:22;;;2068:46;2065:72;;;2117:18;;:::i;:::-;2157:10;2153:2;2146:22;2186:6;2177:15;;2216:6;2208;2201:22;2256:3;2247:6;2242:3;2238:16;2235:25;2232:45;;;2273:1;2270;2263:12;2232:45;2323:6;2318:3;2311:4;2303:6;2299:17;2286:44;2378:1;2371:4;2362:6;2354;2350:19;2346:30;2339:41;;;;1696:690;;;;;:::o;2391:749::-;2514:6;2522;2530;2574:9;2565:7;2561:23;2604:3;2600:2;2596:12;2593:32;;;2621:1;2618;2611:12;2593:32;2644:29;2663:9;2644:29;:::i;:::-;2634:39;;2766:2;2697:66;2693:2;2689:75;2685:84;2682:104;;;2782:1;2779;2772:12;2682:104;;2820:2;2809:9;2805:18;2795:28;;2874:2;2863:9;2859:18;2846:32;2901:18;2893:6;2890:30;2887:50;;;2933:1;2930;2923:12;2887:50;2956:22;;3009:4;3001:13;;2997:27;-1:-1:-1;2987:55:383;;3038:1;3035;3028:12;2987:55;3061:73;3126:7;3121:2;3108:16;3103:2;3099;3095:11;3061:73;:::i;:::-;3051:83;;;2391:749;;;;;:::o;3145:258::-;3217:1;3227:113;3241:6;3238:1;3235:13;3227:113;;;3317:11;;;3311:18;3298:11;;;3291:39;3263:2;3256:10;3227:113;;;3358:6;3355:1;3352:13;3349:48;;;3393:1;3384:6;3379:3;3375:16;3368:27;3349:48;;3145:258;;;:::o;3408:317::-;3450:3;3488:5;3482:12;3515:6;3510:3;3503:19;3531:63;3587:6;3580:4;3575:3;3571:14;3564:4;3557:5;3553:16;3531:63;:::i;:::-;3639:2;3627:15;3644:66;3623:88;3614:98;;;;3714:4;3610:109;;3408:317;-1:-1:-1;;3408:317:383:o;3730:220::-;3879:2;3868:9;3861:21;3842:4;3899:45;3940:2;3929:9;3925:18;3917:6;3899:45;:::i;3955:254::-;4023:6;4031;4084:2;4072:9;4063:7;4059:23;4055:32;4052:52;;;4100:1;4097;4090:12;4052:52;4123:29;4142:9;4123:29;:::i;:::-;4113:39;4199:2;4184:18;;;;4171:32;;-1:-1:-1;;;3955:254:383:o;4848:186::-;4907:6;4960:2;4948:9;4939:7;4935:23;4931:32;4928:52;;;4976:1;4973;4966:12;4928:52;4999:29;5018:9;4999:29;:::i;5039:450::-;5108:6;5161:2;5149:9;5140:7;5136:23;5132:32;5129:52;;;5177:1;5174;5167:12;5129:52;5217:9;5204:23;5250:18;5242:6;5239:30;5236:50;;;5282:1;5279;5272:12;5236:50;5305:22;;5358:4;5350:13;;5346:27;-1:-1:-1;5336:55:383;;5387:1;5384;5377:12;5336:55;5410:73;5475:7;5470:2;5457:16;5452:2;5448;5444:11;5410:73;:::i;:::-;5400:83;5039:450;-1:-1:-1;;;;5039:450:383:o;6326:184::-;6378:77;6375:1;6368:88;6475:4;6472:1;6465:15;6499:4;6496:1;6489:15;6515:1238;6727:4;6756:2;6796;6785:9;6781:18;6826:2;6815:9;6808:21;6849:6;6884;6878:13;6915:6;6907;6900:22;6941:2;6931:12;;6974:2;6963:9;6959:18;6952:25;;7036:2;7026:6;7023:1;7019:14;7008:9;7004:30;7000:39;7074:2;7066:6;7062:15;7095:1;7105:619;7119:6;7116:1;7113:13;7105:619;;;7184:22;;;7208:66;7180:95;7168:108;;7299:13;;7371:9;;7382:42;7367:58;7352:74;;7469:11;;;7463:18;7446:15;;;7439:43;7521:11;;7515:18;7335:4;7553:15;;;7546:27;;;7596:48;7628:15;;;7515:18;7596:48;:::i;:::-;7702:12;;;;7586:58;-1:-1:-1;;;7667:15:383;;;;7141:1;7134:9;7105:619;;;-1:-1:-1;7741:6:383;;6515:1238;-1:-1:-1;;;;;;;;6515:1238:383:o;7758:338::-;7945:42;7937:6;7933:55;7922:9;7915:74;8025:2;8020;8009:9;8005:18;7998:30;7896:4;8045:45;8086:2;8075:9;8071:18;8063:6;8045:45;:::i;8576:282::-;8616:3;8647:1;8643:6;8640:1;8637:13;8634:193;;;8683:77;8680:1;8673:88;8784:4;8781:1;8774:15;8812:4;8809:1;8802:15;8634:193;-1:-1:-1;8843:9:383;;8576:282::o;10890:409::-;11105:42;11097:6;11093:55;11082:9;11075:74;11185:6;11180:2;11169:9;11165:18;11158:34;11228:2;11223;11212:9;11208:18;11201:30;11056:4;11248:45;11289:2;11278:9;11274:18;11266:6;11248:45;:::i;:::-;11240:53;10890:409;-1:-1:-1;;;;;10890:409:383:o;11918:184::-;11970:77;11967:1;11960:88;12067:4;12064:1;12057:15;12091:4;12088:1;12081:15;12107:289;12282:6;12271:9;12264:25;12325:2;12320;12309:9;12305:18;12298:30;12245:4;12345:45;12386:2;12375:9;12371:18;12363:6;12345:45;:::i;12401:274::-;12530:3;12568:6;12562:13;12584:53;12630:6;12625:3;12618:4;12610:6;12606:17;12584:53;:::i;:::-;12653:16;;;;;12401:274;-1:-1:-1;;12401:274:383:o;12680:184::-;12750:6;12803:2;12791:9;12782:7;12778:23;12774:32;12771:52;;;12819:1;12816;12809:12;12771:52;-1:-1:-1;12842:16:383;;12680:184;-1:-1:-1;12680:184:383:o","linkReferences":{},"immutableReferences":{"112287":[{"start":244,"length":32},{"start":1000,"length":32}],"112291":[{"start":651,"length":32},{"start":1669,"length":32},{"start":3126,"length":32}]}},"methodIdentifiers":{"ATTESTATION_STATION()":"db083d71","CAN_INVITE_ATTESTATION_KEY()":"916db22f","CLAIMABLE_INVITE_TYPEHASH()":"c4fc453d","EIP712_VERSION()":"eccec5a8","INVITE_GRANTER()":"14b47241","MIN_COMMITMENT_PERIOD()":"50b414e6","claimInvite(address,(address,bytes32),bytes)":"50eedbc2","commitInvite(bytes32)":"187e3cd1","commitmentTimestamps(bytes32)":"b4245d73","initialize(string)":"f62d1888","inviteCounts(address)":"de2dd221","setInviteCounts(address[],uint256)":"25b27a3d","usedNonces(address,bytes32)":"5fda04c7","version()":"54fd4d50"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inviteGranter\",\"type\":\"address\"},{\"internalType\":\"contract AttestationStation\",\"name\":\"_attestationStation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"InviteClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ATTESTATION_STATION\",\"outputs\":[{\"internalType\":\"contract AttestationStation\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAN_INVITE_ATTESTATION_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIMABLE_INVITE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INVITE_GRANTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_COMMITMENT_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"internalType\":\"struct OptimistInviter.ClaimableInvite\",\"name\":\"_claimableInvite\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"claimInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"}],\"name\":\"commitInvite\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitmentTimestamps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inviteCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_inviteCount\",\"type\":\"uint256\"}],\"name\":\"setInviteCounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:upgradeable\":\"@title  OptimistInviter\",\"events\":{\"InviteClaimed(address,address)\":{\"params\":{\"claimer\":\"Address that claimed the invite.\",\"issuer\":\"Address that issued the signature.\"}}},\"kind\":\"dev\",\"methods\":{\"claimInvite(address,(address,bytes32),bytes)\":{\"params\":{\"_claimableInvite\":\"ClaimableInvite struct containing the issuer and nonce.\",\"_claimer\":\"Address that will be granted the invite.\",\"_signature\":\"Signature signed over the claimable invite.\"}},\"commitInvite(bytes32)\":{\"params\":{\"_commitment\":\"A hash of the claimer and signature concatenated.                    keccak256(abi.encode(_claimer, _signature))\"}},\"constructor\":{\"params\":{\"_attestationStation\":\"Address of the AttestationStation contract.\",\"_inviteGranter\":\"Address of the invite granter.\"}},\"initialize(string)\":{\"params\":{\"_name\":\"Contract name.\"}},\"setInviteCounts(address[],uint256)\":{\"params\":{\"_accounts\":\"An array of accounts to update the invite counts of.\",\"_inviteCount\":\"Number of invites to set to.\"}}},\"stateVariables\":{\"version\":{\"custom:semver\":\"1.1.0\"}},\"version\":1},\"userdoc\":{\"events\":{\"InviteClaimed(address,address)\":{\"notice\":\"Emitted when an invite is claimed.\"}},\"kind\":\"user\",\"methods\":{\"ATTESTATION_STATION()\":{\"notice\":\"Address of the AttestationStation contract.\"},\"CAN_INVITE_ATTESTATION_KEY()\":{\"notice\":\"Attestation key for that signals that an account was allowed to issue invites\"},\"CLAIMABLE_INVITE_TYPEHASH()\":{\"notice\":\"EIP712 typehash for the ClaimableInvite type.\"},\"EIP712_VERSION()\":{\"notice\":\"Version used for the EIP712 domain separator. This version is separated from the         contract semver because the EIP712 domain separator is used to sign messages, and         changing the domain separator invalidates all existing signatures. We should only         bump this version if we make a major change to the signature scheme.\"},\"INVITE_GRANTER()\":{\"notice\":\"Granter who can set accounts' invite counts.\"},\"MIN_COMMITMENT_PERIOD()\":{\"notice\":\"Minimum age of a commitment (in seconds) before it can be revealed using         claimInvite. Currently set to 60 seconds.        Prevents an attacker from front-running a commitment by taking the signature in the        claimInvite call and quickly committing and claiming it before the the claimer's        transaction succeeds. With this, frontrunning a commitment requires that an attacker        be able to prevent the honest claimer's claimInvite transaction from being included        for this long.\"},\"claimInvite(address,(address,bytes32),bytes)\":{\"notice\":\"Allows anyone to reveal a commitment and claim an invite.         The hash, keccak256(abi.encode(_claimer, _signature)), should have been already         committed using commitInvite. Before issuing the \\\"optimist.can-mint-from-invite\\\"         attestation, this function checks that           1) the hash corresponding to the _claimer and the _signature was committed           2) MIN_COMMITMENT_PERIOD has passed since the commitment was made.           3) the _signature is signed correctly by the issuer           4) the _signature hasn't already been used to claim an invite before           5) the _signature issuer has not used up all of their invites         This function doesn't require that the _claimer is calling this function.\"},\"commitInvite(bytes32)\":{\"notice\":\"Allows anyone (but likely the claimer) to commit a received signature along with the         address to claim to.         Before calling this function, the claimer should have received a signature from the          issuer off-chain. The claimer then calls this function with the hash of the         claimer's address and the received signature. This is necessary to prevent         front-running when the invitee is claiming the invite. Without a commit and reveal         scheme, anyone who is watching the mempool can take the signature being submitted         and front run the transaction to claim the invite to their own address.         The same commitment can only be made once, and the function reverts if the         commitment has already been made. This prevents griefing where a malicious party can         prevent the original claimer from being able to claimInvite.\"},\"commitmentTimestamps(bytes32)\":{\"notice\":\"Maps from hashes to the timestamp when they were committed.\"},\"initialize(string)\":{\"notice\":\"Initializes this contract, setting the EIP712 context.         Only update the EIP712_VERSION when there is a change to the signature scheme.         After the EIP712 version is changed, any signatures issued off-chain but not         claimed yet will no longer be accepted by the claimInvite function. Please make         sure to notify the issuers that they must re-issue their invite signatures.\"},\"inviteCounts(address)\":{\"notice\":\"Maps from addresses to number of invites they have.\"},\"setInviteCounts(address[],uint256)\":{\"notice\":\"Allows invite granter to set the number of invites an address has.\"},\"usedNonces(address,bytes32)\":{\"notice\":\"Maps from addresses to nonces to whether or not they have been used.\"},\"version()\":{\"notice\":\"Semantic version.\"}},\"notice\":\"OptimistInviter issues \\\"optimist.can-invite\\\" and \\\"optimist.can-mint-from-invite\\\"         attestations. Accounts that have invites can issue signatures that allow other         accounts to claim an invite. The invitee uses a claim and reveal flow to claim the         invite to an address of their choosing.         Parties involved:          1) INVITE_GRANTER: trusted account that can allow accounts to issue invites          2) issuer: account that is allowed to issue invites          3) claimer: account that receives the invites        Flow:          1) INVITE_GRANTER calls _setInviteCount to allow an issuer to issue a certain number             of invites, and also creates a \\\"optimist.can-invite\\\" attestation for the issuer          2) Off-chain, the issuer signs (EIP-712) a ClaimableInvite to produce a signature          3) Off-chain, invite issuer sends the plaintext ClaimableInvite and the signature             to the recipient          4) claimer chooses an address they want to receive the invite on          5) claimer commits the hash of the address they want to receive the invite on and the             received signature keccak256(abi.encode(addressToReceiveTo, receivedSignature))             using the commitInvite function          6) claimer waits for the MIN_COMMITMENT_PERIOD to pass.          7) claimer reveals the plaintext ClaimableInvite and the signature using the             claimInvite function, receiving the \\\"optimist.can-mint-from-invite\\\" attestation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/periphery/op-nft/OptimistInviter.sol\":\"OptimistInviter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[\":@lib-keccak/=lib/lib-keccak/contracts/lib/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/solmate/\",\":@solady-test/=lib/lib-keccak/lib/solady/test/\",\":@solady/=lib/solady/src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":kontrol-cheatcodes/=lib/kontrol-cheatcodes/src/\",\":lib-keccak/=lib/lib-keccak/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":safe-contracts/=lib/safe-contracts/contracts/\",\":solady/=lib/solady/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497\",\"dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol\":{\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://841619682637df5579b4c396d281d6c55b26f1b1acce1d0ab67bead5e39cf60c\",\"dweb:/ipfs/QmNRtuKp43ZHJwswdyT3GivY4fDMvz3cxBe1FfDthG1JGj\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol\":{\"keccak256\":\"0xbf5daf926894541a40a64b43c3746aa1940c5a1b3b8d14a06465eea72a9b90cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fbdea6be4e36fc5406e81560d8f3f073a61c5d3cb5889b7c896ff5981e2128eb\",\"dweb:/ipfs/QmPpkPNkLEjDf4RZYjiypj9BrNyaXrb2U4pE9aq7sTG9km\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"keccak256\":\"0xaf5a96100f421d61693605349511e43221d3c2e47d4b3efa87af2b936e2567fc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://371fd95bad4416766089d3e621dee1fd86fece2b266ad3f9443fefe567e24e94\",\"dweb:/ipfs/QmNciwwtGev3Q8uVhnoE5PQUSCDpMp6KtVjiDgnGdqLmWX\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol\":{\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c45b821ef9e882e57c256697a152e108f0f2ad6997609af8904cae99c9bd422e\",\"dweb:/ipfs/QmRKCJW6jjzR5UYZcLpGnhEJ75UVbH6EHkEa49sWx2SKng\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487\",\"dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638\",\"dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf52bdf22a33263f5ca6227a35faeac3b81e7d2c692fbcc6a079d488710c5900\",\"dweb:/ipfs/QmcmsjkP4yq3UhiJbvyzwufaY2EKh1zhHaRK8ATag2cpD2\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol\":{\"keccak256\":\"0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://392c009a19ece7831c9851d8f47fa8a1ee7ae81eeff01040a976cc110b0b9a3b\",\"dweb:/ipfs/QmbtmS8RRPVNghAu9qWieesPkyrabQSypVpgbyhfzzubCe\"]},\"src/periphery/op-nft/AttestationStation.sol\":{\"keccak256\":\"0x756accab2fc86dbe076dc340af05c06c732815392a8cbab6524dc971d4957208\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a4bf7f1a162318d31c39a4d34d46ada80cdacd51c24a110f411ec245c1b6a4ef\",\"dweb:/ipfs/QmScehXXWTKDnUr9ohMb1o8zButujNP9SDAWRSnDy6jpdK\"]},\"src/periphery/op-nft/OptimistInviter.sol\":{\"keccak256\":\"0x9d798824a1bdd45ffc46123f3fd8fd1e7855a05df52dcfc134f5f10db6fa57eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7bc646a72c4db3f3b68c5935cfd8d067897af83f7d788c2cdeb47bf9f3ced2c9\",\"dweb:/ipfs/QmQjRhFArSuWgMmCbS8ZLrAr1njHort2dMBpa1eDx4Geu7\"]},\"src/periphery/op-nft/libraries/OptimistConstants.sol\":{\"keccak256\":\"0x901c8a2a333a668ef2a6336a803dd06fea51d4128a38087af4565bff1ae6db8c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87e68615dea2494b1cd8f96d7ad97ccb9556d00539526b53a7ce5314570fc268\",\"dweb:/ipfs/QmZBNNrSVMKz4GDkRJyp5jjV6V4wGN7ySAhDd1pBvbJkS2\"]},\"src/universal/ISemver.sol\":{\"keccak256\":\"0xba34562a8026f59886d2e07d1d58d90b9691d00e0788c6263cef6c22740cab44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0826f998632f83c103c3085bf2e872db79a69022b6d2e0444c83a64ca5283c2a\",\"dweb:/ipfs/QmcJ7PNqkAfKqbjFGRordtAg1v9DvcBSKvdTkVvciLyvQR\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.15+commit.e14f2714"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"_inviteGranter","type":"address"},{"internalType":"contract AttestationStation","name":"_attestationStation","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint8","name":"version","type":"uint8","indexed":false}],"type":"event","name":"Initialized","anonymous":false},{"inputs":[{"internalType":"address","name":"issuer","type":"address","indexed":true},{"internalType":"address","name":"claimer","type":"address","indexed":true}],"type":"event","name":"InviteClaimed","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"ATTESTATION_STATION","outputs":[{"internalType":"contract AttestationStation","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"CAN_INVITE_ATTESTATION_KEY","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"CLAIMABLE_INVITE_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"EIP712_VERSION","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"INVITE_GRANTER","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"MIN_COMMITMENT_PERIOD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_claimer","type":"address"},{"internalType":"struct OptimistInviter.ClaimableInvite","name":"_claimableInvite","type":"tuple","components":[{"internalType":"address","name":"issuer","type":"address"},{"internalType":"bytes32","name":"nonce","type":"bytes32"}]},{"internalType":"bytes","name":"_signature","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"claimInvite"},{"inputs":[{"internalType":"bytes32","name":"_commitment","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"commitInvite"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function","name":"commitmentTimestamps","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"string","name":"_name","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"initialize"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function","name":"inviteCounts","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address[]","name":"_accounts","type":"address[]"},{"internalType":"uint256","name":"_inviteCount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setInviteCounts"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function","name":"usedNonces","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"version","outputs":[{"internalType":"string","name":"","type":"string"}]}],"devdoc":{"kind":"dev","methods":{"claimInvite(address,(address,bytes32),bytes)":{"params":{"_claimableInvite":"ClaimableInvite struct containing the issuer and nonce.","_claimer":"Address that will be granted the invite.","_signature":"Signature signed over the claimable invite."}},"commitInvite(bytes32)":{"params":{"_commitment":"A hash of the claimer and signature concatenated.                    keccak256(abi.encode(_claimer, _signature))"}},"constructor":{"params":{"_attestationStation":"Address of the AttestationStation contract.","_inviteGranter":"Address of the invite granter."}},"initialize(string)":{"params":{"_name":"Contract name."}},"setInviteCounts(address[],uint256)":{"params":{"_accounts":"An array of accounts to update the invite counts of.","_inviteCount":"Number of invites to set to."}}},"version":1},"userdoc":{"kind":"user","methods":{"ATTESTATION_STATION()":{"notice":"Address of the AttestationStation contract."},"CAN_INVITE_ATTESTATION_KEY()":{"notice":"Attestation key for that signals that an account was allowed to issue invites"},"CLAIMABLE_INVITE_TYPEHASH()":{"notice":"EIP712 typehash for the ClaimableInvite type."},"EIP712_VERSION()":{"notice":"Version used for the EIP712 domain separator. This version is separated from the         contract semver because the EIP712 domain separator is used to sign messages, and         changing the domain separator invalidates all existing signatures. We should only         bump this version if we make a major change to the signature scheme."},"INVITE_GRANTER()":{"notice":"Granter who can set accounts' invite counts."},"MIN_COMMITMENT_PERIOD()":{"notice":"Minimum age of a commitment (in seconds) before it can be revealed using         claimInvite. Currently set to 60 seconds.        Prevents an attacker from front-running a commitment by taking the signature in the        claimInvite call and quickly committing and claiming it before the the claimer's        transaction succeeds. With this, frontrunning a commitment requires that an attacker        be able to prevent the honest claimer's claimInvite transaction from being included        for this long."},"claimInvite(address,(address,bytes32),bytes)":{"notice":"Allows anyone to reveal a commitment and claim an invite.         The hash, keccak256(abi.encode(_claimer, _signature)), should have been already         committed using commitInvite. Before issuing the \"optimist.can-mint-from-invite\"         attestation, this function checks that           1) the hash corresponding to the _claimer and the _signature was committed           2) MIN_COMMITMENT_PERIOD has passed since the commitment was made.           3) the _signature is signed correctly by the issuer           4) the _signature hasn't already been used to claim an invite before           5) the _signature issuer has not used up all of their invites         This function doesn't require that the _claimer is calling this function."},"commitInvite(bytes32)":{"notice":"Allows anyone (but likely the claimer) to commit a received signature along with the         address to claim to.         Before calling this function, the claimer should have received a signature from the          issuer off-chain. The claimer then calls this function with the hash of the         claimer's address and the received signature. This is necessary to prevent         front-running when the invitee is claiming the invite. Without a commit and reveal         scheme, anyone who is watching the mempool can take the signature being submitted         and front run the transaction to claim the invite to their own address.         The same commitment can only be made once, and the function reverts if the         commitment has already been made. This prevents griefing where a malicious party can         prevent the original claimer from being able to claimInvite."},"commitmentTimestamps(bytes32)":{"notice":"Maps from hashes to the timestamp when they were committed."},"initialize(string)":{"notice":"Initializes this contract, setting the EIP712 context.         Only update the EIP712_VERSION when there is a change to the signature scheme.         After the EIP712 version is changed, any signatures issued off-chain but not         claimed yet will no longer be accepted by the claimInvite function. Please make         sure to notify the issuers that they must re-issue their invite signatures."},"inviteCounts(address)":{"notice":"Maps from addresses to number of invites they have."},"setInviteCounts(address[],uint256)":{"notice":"Allows invite granter to set the number of invites an address has."},"usedNonces(address,bytes32)":{"notice":"Maps from addresses to nonces to whether or not they have been used."},"version()":{"notice":"Semantic version."}},"version":1}},"settings":{"remappings":["@lib-keccak/=lib/lib-keccak/contracts/lib/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@rari-capital/solmate/=lib/solmate/","@solady-test/=lib/lib-keccak/lib/solady/test/","@solady/=lib/solady/src/","ds-test/=lib/forge-std/lib/ds-test/src/","forge-std/=lib/forge-std/src/","kontrol-cheatcodes/=lib/kontrol-cheatcodes/src/","lib-keccak/=lib/lib-keccak/contracts/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","safe-contracts/=lib/safe-contracts/contracts/","solady/=lib/solady/","solmate/=lib/solmate/src/"],"optimizer":{"enabled":true,"runs":999999},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"src/periphery/op-nft/OptimistInviter.sol":"OptimistInviter"},"evmVersion":"london","libraries":{}},"sources":{"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol":{"keccak256":"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e","urls":["bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497","dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8"],"license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol":{"keccak256":"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3","urls":["bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4","dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt"],"license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/StringsUpgradeable.sol":{"keccak256":"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863","urls":["bzz-raw://841619682637df5579b4c396d281d6c55b26f1b1acce1d0ab67bead5e39cf60c","dweb:/ipfs/QmNRtuKp43ZHJwswdyT3GivY4fDMvz3cxBe1FfDthG1JGj"],"license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/ECDSAUpgradeable.sol":{"keccak256":"0xbf5daf926894541a40a64b43c3746aa1940c5a1b3b8d14a06465eea72a9b90cc","urls":["bzz-raw://fbdea6be4e36fc5406e81560d8f3f073a61c5d3cb5889b7c896ff5981e2128eb","dweb:/ipfs/QmPpkPNkLEjDf4RZYjiypj9BrNyaXrb2U4pE9aq7sTG9km"],"license":"MIT"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol":{"keccak256":"0xaf5a96100f421d61693605349511e43221d3c2e47d4b3efa87af2b936e2567fc","urls":["bzz-raw://371fd95bad4416766089d3e621dee1fd86fece2b266ad3f9443fefe567e24e94","dweb:/ipfs/QmNciwwtGev3Q8uVhnoE5PQUSCDpMp6KtVjiDgnGdqLmWX"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol":{"keccak256":"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544","urls":["bzz-raw://c45b821ef9e882e57c256697a152e108f0f2ad6997609af8904cae99c9bd422e","dweb:/ipfs/QmRKCJW6jjzR5UYZcLpGnhEJ75UVbH6EHkEa49sWx2SKng"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Address.sol":{"keccak256":"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10","urls":["bzz-raw://35c47bece3c03caaa07fab37dd2bb3413bfbca20db7bd9895024390e0a469487","dweb:/ipfs/QmPGWT2x3QHcKxqe6gRmAkdakhbaRgx3DLzcakHz5M4eXG"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3","urls":["bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638","dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol":{"keccak256":"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5","urls":["bzz-raw://bf52bdf22a33263f5ca6227a35faeac3b81e7d2c692fbcc6a079d488710c5900","dweb:/ipfs/QmcmsjkP4yq3UhiJbvyzwufaY2EKh1zhHaRK8ATag2cpD2"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol":{"keccak256":"0xbb5c92a62f2a917ec08667ebc024d5f4172ae3594cd5f4eaa997485ed0440d81","urls":["bzz-raw://392c009a19ece7831c9851d8f47fa8a1ee7ae81eeff01040a976cc110b0b9a3b","dweb:/ipfs/QmbtmS8RRPVNghAu9qWieesPkyrabQSypVpgbyhfzzubCe"],"license":"MIT"},"src/periphery/op-nft/AttestationStation.sol":{"keccak256":"0x756accab2fc86dbe076dc340af05c06c732815392a8cbab6524dc971d4957208","urls":["bzz-raw://a4bf7f1a162318d31c39a4d34d46ada80cdacd51c24a110f411ec245c1b6a4ef","dweb:/ipfs/QmScehXXWTKDnUr9ohMb1o8zButujNP9SDAWRSnDy6jpdK"],"license":"MIT"},"src/periphery/op-nft/OptimistInviter.sol":{"keccak256":"0x9d798824a1bdd45ffc46123f3fd8fd1e7855a05df52dcfc134f5f10db6fa57eb","urls":["bzz-raw://7bc646a72c4db3f3b68c5935cfd8d067897af83f7d788c2cdeb47bf9f3ced2c9","dweb:/ipfs/QmQjRhFArSuWgMmCbS8ZLrAr1njHort2dMBpa1eDx4Geu7"],"license":"MIT"},"src/periphery/op-nft/libraries/OptimistConstants.sol":{"keccak256":"0x901c8a2a333a668ef2a6336a803dd06fea51d4128a38087af4565bff1ae6db8c","urls":["bzz-raw://87e68615dea2494b1cd8f96d7ad97ccb9556d00539526b53a7ce5314570fc268","dweb:/ipfs/QmZBNNrSVMKz4GDkRJyp5jjV6V4wGN7ySAhDd1pBvbJkS2"],"license":"MIT"},"src/universal/ISemver.sol":{"keccak256":"0xba34562a8026f59886d2e07d1d58d90b9691d00e0788c6263cef6c22740cab44","urls":["bzz-raw://0826f998632f83c103c3085bf2e872db79a69022b6d2e0444c83a64ca5283c2a","dweb:/ipfs/QmcJ7PNqkAfKqbjFGRordtAg1v9DvcBSKvdTkVvciLyvQR"],"license":"MIT"}},"version":1},"storageLayout":{"storage":[{"astId":47113,"contract":"src/periphery/op-nft/OptimistInviter.sol:OptimistInviter","label":"_initialized","offset":0,"slot":"0","type":"t_uint8"},{"astId":47116,"contract":"src/periphery/op-nft/OptimistInviter.sol:OptimistInviter","label":"_initializing","offset":1,"slot":"0","type":"t_bool"},{"astId":49268,"contract":"src/periphery/op-nft/OptimistInviter.sol:OptimistInviter","label":"_HASHED_NAME","offset":0,"slot":"1","type":"t_bytes32"},{"astId":49270,"contract":"src/periphery/op-nft/OptimistInviter.sol:OptimistInviter","label":"_HASHED_VERSION","offset":0,"slot":"2","type":"t_bytes32"},{"astId":49408,"contract":"src/periphery/op-nft/OptimistInviter.sol:OptimistInviter","label":"__gap","offset":0,"slot":"3","type":"t_array(t_uint256)50_storage"},{"astId":112305,"contract":"src/periphery/op-nft/OptimistInviter.sol:OptimistInviter","label":"commitmentTimestamps","offset":0,"slot":"53","type":"t_mapping(t_bytes32,t_uint256)"},{"astId":112312,"contract":"src/periphery/op-nft/OptimistInviter.sol:OptimistInviter","label":"usedNonces","offset":0,"slot":"54","type":"t_mapping(t_address,t_mapping(t_bytes32,t_bool))"},{"astId":112317,"contract":"src/periphery/op-nft/OptimistInviter.sol:OptimistInviter","label":"inviteCounts","offset":0,"slot":"55","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)50_storage":{"encoding":"inplace","label":"uint256[50]","numberOfBytes":"1600","base":"t_uint256"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_mapping(t_bytes32,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes32 => bool))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"version":1,"kind":"user","methods":{"ATTESTATION_STATION()":{"notice":"Address of the AttestationStation contract."},"CAN_INVITE_ATTESTATION_KEY()":{"notice":"Attestation key for that signals that an account was allowed to issue invites"},"CLAIMABLE_INVITE_TYPEHASH()":{"notice":"EIP712 typehash for the ClaimableInvite type."},"EIP712_VERSION()":{"notice":"Version used for the EIP712 domain separator. This version is separated from the         contract semver because the EIP712 domain separator is used to sign messages, and         changing the domain separator invalidates all existing signatures. We should only         bump this version if we make a major change to the signature scheme."},"INVITE_GRANTER()":{"notice":"Granter who can set accounts' invite counts."},"MIN_COMMITMENT_PERIOD()":{"notice":"Minimum age of a commitment (in seconds) before it can be revealed using         claimInvite. Currently set to 60 seconds.        Prevents an attacker from front-running a commitment by taking the signature in the        claimInvite call and quickly committing and claiming it before the the claimer's        transaction succeeds. With this, frontrunning a commitment requires that an attacker        be able to prevent the honest claimer's claimInvite transaction from being included        for this long."},"claimInvite(address,(address,bytes32),bytes)":{"notice":"Allows anyone to reveal a commitment and claim an invite.         The hash, keccak256(abi.encode(_claimer, _signature)), should have been already         committed using commitInvite. Before issuing the \"optimist.can-mint-from-invite\"         attestation, this function checks that           1) the hash corresponding to the _claimer and the _signature was committed           2) MIN_COMMITMENT_PERIOD has passed since the commitment was made.           3) the _signature is signed correctly by the issuer           4) the _signature hasn't already been used to claim an invite before           5) the _signature issuer has not used up all of their invites         This function doesn't require that the _claimer is calling this function."},"commitInvite(bytes32)":{"notice":"Allows anyone (but likely the claimer) to commit a received signature along with the         address to claim to.         Before calling this function, the claimer should have received a signature from the          issuer off-chain. The claimer then calls this function with the hash of the         claimer's address and the received signature. This is necessary to prevent         front-running when the invitee is claiming the invite. Without a commit and reveal         scheme, anyone who is watching the mempool can take the signature being submitted         and front run the transaction to claim the invite to their own address.         The same commitment can only be made once, and the function reverts if the         commitment has already been made. This prevents griefing where a malicious party can         prevent the original claimer from being able to claimInvite."},"commitmentTimestamps(bytes32)":{"notice":"Maps from hashes to the timestamp when they were committed."},"initialize(string)":{"notice":"Initializes this contract, setting the EIP712 context.         Only update the EIP712_VERSION when there is a change to the signature scheme.         After the EIP712 version is changed, any signatures issued off-chain but not         claimed yet will no longer be accepted by the claimInvite function. Please make         sure to notify the issuers that they must re-issue their invite signatures."},"inviteCounts(address)":{"notice":"Maps from addresses to number of invites they have."},"setInviteCounts(address[],uint256)":{"notice":"Allows invite granter to set the number of invites an address has."},"usedNonces(address,bytes32)":{"notice":"Maps from addresses to nonces to whether or not they have been used."},"version()":{"notice":"Semantic version."}},"events":{"InviteClaimed(address,address)":{"notice":"Emitted when an invite is claimed."}},"notice":"OptimistInviter issues \"optimist.can-invite\" and \"optimist.can-mint-from-invite\"         attestations. Accounts that have invites can issue signatures that allow other         accounts to claim an invite. The invitee uses a claim and reveal flow to claim the         invite to an address of their choosing.         Parties involved:          1) INVITE_GRANTER: trusted account that can allow accounts to issue invites          2) issuer: account that is allowed to issue invites          3) claimer: account that receives the invites        Flow:          1) INVITE_GRANTER calls _setInviteCount to allow an issuer to issue a certain number             of invites, and also creates a \"optimist.can-invite\" attestation for the issuer          2) Off-chain, the issuer signs (EIP-712) a ClaimableInvite to produce a signature          3) Off-chain, invite issuer sends the plaintext ClaimableInvite and the signature             to the recipient          4) claimer chooses an address they want to receive the invite on          5) claimer commits the hash of the address they want to receive the invite on and the             received signature keccak256(abi.encode(addressToReceiveTo, receivedSignature))             using the commitInvite function          6) claimer waits for the MIN_COMMITMENT_PERIOD to pass.          7) claimer reveals the plaintext ClaimableInvite and the signature using the             claimInvite function, receiving the \"optimist.can-mint-from-invite\" attestation"},"devdoc":{"version":1,"kind":"dev","methods":{"claimInvite(address,(address,bytes32),bytes)":{"params":{"_claimableInvite":"ClaimableInvite struct containing the issuer and nonce.","_claimer":"Address that will be granted the invite.","_signature":"Signature signed over the claimable invite."}},"commitInvite(bytes32)":{"params":{"_commitment":"A hash of the claimer and signature concatenated.                    keccak256(abi.encode(_claimer, _signature))"}},"constructor":{"params":{"_attestationStation":"Address of the AttestationStation contract.","_inviteGranter":"Address of the invite granter."}},"initialize(string)":{"params":{"_name":"Contract name."}},"setInviteCounts(address[],uint256)":{"params":{"_accounts":"An array of accounts to update the invite counts of.","_inviteCount":"Number of invites to set to."}}},"events":{"InviteClaimed(address,address)":{"params":{"claimer":"Address that claimed the invite.","issuer":"Address that issued the signature."}}}},"ast":{"absolutePath":"src/periphery/op-nft/OptimistInviter.sol","id":112582,"exportedSymbols":{"AttestationStation":[111810],"EIP712Upgradeable":[49409],"ISemver":[113738],"OptimistConstants":[112592],"OptimistInviter":[112581],"SignatureChecker":[54205]},"nodeType":"SourceUnit","src":"32:13067:233","nodes":[{"id":112245,"nodeType":"PragmaDirective","src":"32:23:233","nodes":[],"literals":["solidity","0.8",".15"]},{"id":112247,"nodeType":"ImportDirective","src":"57:89:233","nodes":[],"absolutePath":"src/periphery/op-nft/libraries/OptimistConstants.sol","file":"src/periphery/op-nft/libraries/OptimistConstants.sol","nameLocation":"-1:-1:-1","scope":112582,"sourceUnit":112593,"symbolAliases":[{"foreign":{"id":112246,"name":"OptimistConstants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112592,"src":"66:17:233","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":112249,"nodeType":"ImportDirective","src":"147:52:233","nodes":[],"absolutePath":"src/universal/ISemver.sol","file":"src/universal/ISemver.sol","nameLocation":"-1:-1:-1","scope":112582,"sourceUnit":113739,"symbolAliases":[{"foreign":{"id":112248,"name":"ISemver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113738,"src":"156:7:233","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":112251,"nodeType":"ImportDirective","src":"200:81:233","nodes":[],"absolutePath":"src/periphery/op-nft/AttestationStation.sol","file":"src/periphery/op-nft/AttestationStation.sol","nameLocation":"-1:-1:-1","scope":112582,"sourceUnit":111811,"symbolAliases":[{"foreign":{"id":112250,"name":"AttestationStation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111810,"src":"209:18:233","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":112253,"nodeType":"ImportDirective","src":"282:99:233","nodes":[],"absolutePath":"lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol","file":"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol","nameLocation":"-1:-1:-1","scope":112582,"sourceUnit":54206,"symbolAliases":[{"foreign":{"id":112252,"name":"SignatureChecker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54205,"src":"291:16:233","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":112255,"nodeType":"ImportDirective","src":"382:119:233","nodes":[],"absolutePath":"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/draft-EIP712Upgradeable.sol","file":"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol","nameLocation":"-1:-1:-1","scope":112582,"sourceUnit":49410,"symbolAliases":[{"foreign":{"id":112254,"name":"EIP712Upgradeable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49409,"src":"391:17:233","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":112581,"nodeType":"ContractDefinition","src":"2147:10951:233","nodes":[{"id":112267,"nodeType":"EventDefinition","src":"2373:69:233","nodes":[],"anonymous":false,"documentation":{"id":112261,"nodeType":"StructuredDocumentation","src":"2208:160:233","text":"@notice Emitted when an invite is claimed.\n @param issuer  Address that issued the signature.\n @param claimer Address that claimed the invite."},"eventSelector":"745d3c5bc92ab40b418069bf8f8e2030807effceb88bbaa07ee01574f16be475","name":"InviteClaimed","nameLocation":"2379:13:233","parameters":{"id":112266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":112263,"indexed":true,"mutability":"mutable","name":"issuer","nameLocation":"2409:6:233","nodeType":"VariableDeclaration","scope":112267,"src":"2393:22:233","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":112262,"name":"address","nodeType":"ElementaryTypeName","src":"2393:7:233","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":112265,"indexed":true,"mutability":"mutable","name":"claimer","nameLocation":"2433:7:233","nodeType":"VariableDeclaration","scope":112267,"src":"2417:23:233","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":112264,"name":"address","nodeType":"ElementaryTypeName","src":"2417:7:233","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2392:49:233"}},{"id":112271,"nodeType":"VariableDeclaration","src":"2826:47:233","nodes":[],"constant":true,"documentation":{"id":112268,"nodeType":"StructuredDocumentation","src":"2448:373:233","text":"@notice Version used for the EIP712 domain separator. This version is separated from the\n         contract semver because the EIP712 domain separator is used to sign messages, and\n         changing the domain separator invalidates all existing signatures. We should only\n         bump this version if we make a major change to the signature scheme."},"functionSelector":"eccec5a8","mutability":"constant","name":"EIP712_VERSION","nameLocation":"2849:14:233","scope":112581,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":112269,"name":"string","nodeType":"ElementaryTypeName","src":"2826:6:233","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"312e302e30","id":112270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2866:7:233","typeDescriptions":{"typeIdentifier":"t_stringliteral_06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c","typeString":"literal_string \"1.0.0\""},"value":"1.0.0"},"visibility":"public"},{"id":112277,"nodeType":"VariableDeclaration","src":"2942:110:233","nodes":[],"constant":true,"documentation":{"id":112272,"nodeType":"StructuredDocumentation","src":"2880:57:233","text":"@notice EIP712 typehash for the ClaimableInvite type."},"functionSelector":"c4fc453d","mutability":"constant","name":"CLAIMABLE_INVITE_TYPEHASH","nameLocation":"2966:25:233","scope":112581,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":112273,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2942:7:233","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"436c61696d61626c65496e766974652861646472657373206973737565722c62797465733332206e6f6e636529","id":112275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3004:47:233","typeDescriptions":{"typeIdentifier":"t_stringliteral_6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce","typeString":"literal_string \"ClaimableInvite(address issuer,bytes32 nonce)\""},"value":"ClaimableInvite(address issuer,bytes32 nonce)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6529fd129351e725d7bcbc468b0b0b4675477e56b58514e69ab7e66ddfd20fce","typeString":"literal_string \"ClaimableInvite(address issuer,bytes32 nonce)\""}],"id":112274,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2994:9:233","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":112276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2994:58:233","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"id":112284,"nodeType":"VariableDeclaration","src":"3153:83:233","nodes":[],"constant":true,"documentation":{"id":112278,"nodeType":"StructuredDocumentation","src":"3059:89:233","text":"@notice Attestation key for that signals that an account was allowed to issue invites"},"functionSelector":"916db22f","mutability":"constant","name":"CAN_INVITE_ATTESTATION_KEY","nameLocation":"3177:26:233","scope":112581,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":112279,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3153:7:233","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"6f7074696d6973742e63616e2d696e76697465","id":112282,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3214:21:233","typeDescriptions":{"typeIdentifier":"t_stringliteral_194e027229dedfff64e3eaf50a6955d1acf0fe975d4bbe3c858320a5537c807d","typeString":"literal_string \"optimist.can-invite\""},"value":"optimist.can-invite"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_194e027229dedfff64e3eaf50a6955d1acf0fe975d4bbe3c858320a5537c807d","typeString":"literal_string \"optimist.can-invite\""}],"id":112281,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3206:7:233","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":112280,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3206:7:233","typeDescriptions":{}}},"id":112283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3206:30:233","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"id":112287,"nodeType":"VariableDeclaration","src":"3304:39:233","nodes":[],"constant":false,"documentation":{"id":112285,"nodeType":"StructuredDocumentation","src":"3243:56:233","text":"@notice Granter who can set accounts' invite counts."},"functionSelector":"14b47241","mutability":"immutable","name":"INVITE_GRANTER","nameLocation":"3329:14:233","scope":112581,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":112286,"name":"address","nodeType":"ElementaryTypeName","src":"3304:7:233","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"id":112291,"nodeType":"VariableDeclaration","src":"3410:55:233","nodes":[],"constant":false,"documentation":{"id":112288,"nodeType":"StructuredDocumentation","src":"3350:55:233","text":"@notice Address of the AttestationStation contract."},"functionSelector":"db083d71","mutability":"immutable","name":"ATTESTATION_STATION","nameLocation":"3446:19:233","scope":112581,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_AttestationStation_$111810","typeString":"contract AttestationStation"},"typeName":{"id":112290,"nodeType":"UserDefinedTypeName","pathNode":{"id":112289,"name":"AttestationStation","nodeType":"IdentifierPath","referencedDeclaration":111810,"src":"3410:18:233"},"referencedDeclaration":111810,"src":"3410:18:233","typeDescriptions":{"typeIdentifier":"t_contract$_AttestationStation_$111810","typeString":"contract AttestationStation"}},"visibility":"public"},{"id":112295,"nodeType":"VariableDeclaration","src":"4051:50:233","nodes":[],"constant":true,"documentation":{"id":112292,"nodeType":"StructuredDocumentation","src":"3472:574:233","text":"@notice Minimum age of a commitment (in seconds) before it can be revealed using\n         claimInvite. Currently set to 60 seconds.\n        Prevents an attacker from front-running a commitment by taking the signature in the\n        claimInvite call and quickly committing and claiming it before the the claimer's\n        transaction succeeds. With this, frontrunning a commitment requires that an attacker\n        be able to prevent the honest claimer's claimInvite transaction from being included\n        for this long."},"functionSelector":"50b414e6","mutability":"constant","name":"MIN_COMMITMENT_PERIOD","nameLocation":"4075:21:233","scope":112581,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":112293,"name":"uint256","nodeType":"ElementaryTypeName","src":"4051:7:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3630","id":112294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4099:2:233","typeDescriptions":{"typeIdentifier":"t_rational_60_by_1","typeString":"int_const 60"},"value":"60"},"visibility":"public"},{"id":112300,"nodeType":"StructDefinition","src":"4747:77:233","nodes":[],"canonicalName":"OptimistInviter.ClaimableInvite","members":[{"constant":false,"id":112297,"mutability":"mutable","name":"issuer","nameLocation":"4788:6:233","nodeType":"VariableDeclaration","scope":112300,"src":"4780:14:233","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":112296,"name":"address","nodeType":"ElementaryTypeName","src":"4780:7:233","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":112299,"mutability":"mutable","name":"nonce","nameLocation":"4812:5:233","nodeType":"VariableDeclaration","scope":112300,"src":"4804:13:233","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":112298,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4804:7:233","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"ClaimableInvite","nameLocation":"4754:15:233","scope":112581,"visibility":"public"},{"id":112305,"nodeType":"VariableDeclaration","src":"4906:55:233","nodes":[],"constant":false,"documentation":{"id":112301,"nodeType":"StructuredDocumentation","src":"4830:71:233","text":"@notice Maps from hashes to the timestamp when they were committed."},"functionSelector":"b4245d73","mutability":"mutable","name":"commitmentTimestamps","nameLocation":"4941:20:233","scope":112581,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":112304,"keyType":{"id":112302,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4914:7:233","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"4906:27:233","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueType":{"id":112303,"name":"uint256","nodeType":"ElementaryTypeName","src":"4925:7:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"id":112312,"nodeType":"VariableDeclaration","src":"5053:62:233","nodes":[],"constant":false,"documentation":{"id":112306,"nodeType":"StructuredDocumentation","src":"4968:80:233","text":"@notice Maps from addresses to nonces to whether or not they have been used."},"functionSelector":"5fda04c7","mutability":"mutable","name":"usedNonces","nameLocation":"5105:10:233","scope":112581,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_bool_$_$","typeString":"mapping(address => mapping(bytes32 => bool))"},"typeName":{"id":112311,"keyType":{"id":112307,"name":"address","nodeType":"ElementaryTypeName","src":"5061:7:233","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"5053:44:233","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_bool_$_$","typeString":"mapping(address => mapping(bytes32 => bool))"},"valueType":{"id":112310,"keyType":{"id":112308,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5080:7:233","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"5072:24:233","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueType":{"id":112309,"name":"bool","nodeType":"ElementaryTypeName","src":"5091:4:233","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"public"},{"id":112317,"nodeType":"VariableDeclaration","src":"5190:47:233","nodes":[],"constant":false,"documentation":{"id":112313,"nodeType":"StructuredDocumentation","src":"5122:63:233","text":"@notice Maps from addresses to number of invites they have."},"functionSelector":"de2dd221","mutability":"mutable","name":"inviteCounts","nameLocation":"5225:12:233","scope":112581,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":112316,"keyType":{"id":112314,"name":"address","nodeType":"ElementaryTypeName","src":"5198:7:233","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"5190:27:233","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueType":{"id":112315,"name":"uint256","nodeType":"ElementaryTypeName","src":"5209:7:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"id":112321,"nodeType":"VariableDeclaration","src":"5307:40:233","nodes":[],"baseFunctions":[113737],"constant":true,"documentation":{"id":112318,"nodeType":"StructuredDocumentation","src":"5244:58:233","text":"@notice Semantic version.\n @custom:semver 1.1.0"},"functionSelector":"54fd4d50","mutability":"constant","name":"version","nameLocation":"5330:7:233","scope":112581,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":112319,"name":"string","nodeType":"ElementaryTypeName","src":"5307:6:233","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"value":{"hexValue":"312e312e30","id":112320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5340:7:233","typeDescriptions":{"typeIdentifier":"t_stringliteral_6815ba53416ba06aff1932cc76b3832272bafab9bc8e066be382e32b06ba5546","typeString":"literal_string \"1.1.0\""},"value":"1.1.0"},"visibility":"public"},{"id":112339,"nodeType":"FunctionDefinition","src":"5499:175:233","nodes":[],"body":{"id":112338,"nodeType":"Block","src":"5575:99:233","nodes":[],"statements":[{"expression":{"id":112332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":112330,"name":"INVITE_GRANTER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112287,"src":"5585:14:233","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":112331,"name":"_inviteGranter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112324,"src":"5602:14:233","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5585:31:233","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":112333,"nodeType":"ExpressionStatement","src":"5585:31:233"},{"expression":{"id":112336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":112334,"name":"ATTESTATION_STATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112291,"src":"5626:19:233","typeDescriptions":{"typeIdentifier":"t_contract$_AttestationStation_$111810","typeString":"contract AttestationStation"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":112335,"name":"_attestationStation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112327,"src":"5648:19:233","typeDescriptions":{"typeIdentifier":"t_contract$_AttestationStation_$111810","typeString":"contract AttestationStation"}},"src":"5626:41:233","typeDescriptions":{"typeIdentifier":"t_contract$_AttestationStation_$111810","typeString":"contract AttestationStation"}},"id":112337,"nodeType":"ExpressionStatement","src":"5626:41:233"}]},"documentation":{"id":112322,"nodeType":"StructuredDocumentation","src":"5354:140:233","text":"@param _inviteGranter      Address of the invite granter.\n @param _attestationStation Address of the AttestationStation contract."},"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","parameters":{"id":112328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":112324,"mutability":"mutable","name":"_inviteGranter","nameLocation":"5519:14:233","nodeType":"VariableDeclaration","scope":112339,"src":"5511:22:233","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":112323,"name":"address","nodeType":"ElementaryTypeName","src":"5511:7:233","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":112327,"mutability":"mutable","name":"_attestationStation","nameLocation":"5554:19:233","nodeType":"VariableDeclaration","scope":112339,"src":"5535:38:233","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_AttestationStation_$111810","typeString":"contract AttestationStation"},"typeName":{"id":112326,"nodeType":"UserDefinedTypeName","pathNode":{"id":112325,"name":"AttestationStation","nodeType":"IdentifierPath","referencedDeclaration":111810,"src":"5535:18:233"},"referencedDeclaration":111810,"src":"5535:18:233","typeDescriptions":{"typeIdentifier":"t_contract$_AttestationStation_$111810","typeString":"contract AttestationStation"}},"visibility":"internal"}],"src":"5510:64:233"},"returnParameters":{"id":112329,"nodeType":"ParameterList","parameters":[],"src":"5575:0:233"},"scope":112581,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":112353,"nodeType":"FunctionDefinition","src":"6163:113:233","nodes":[],"body":{"id":112352,"nodeType":"Block","src":"6223:53:233","nodes":[],"statements":[{"expression":{"arguments":[{"id":112348,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112342,"src":"6247:5:233","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":112349,"name":"EIP712_VERSION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112271,"src":"6254:14:233","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":112347,"name":"__EIP712_init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49291,"src":"6233:13:233","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory,string memory)"}},"id":112350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6233:36:233","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":112351,"nodeType":"ExpressionStatement","src":"6233:36:233"}]},"documentation":{"id":112340,"nodeType":"StructuredDocumentation","src":"5680:478:233","text":"@notice Initializes this contract, setting the EIP712 context.\n         Only update the EIP712_VERSION when there is a change to the signature scheme.\n         After the EIP712 version is changed, any signatures issued off-chain but not\n         claimed yet will no longer be accepted by the claimInvite function. Please make\n         sure to notify the issuers that they must re-issue their invite signatures.\n @param _name Contract name."},"functionSelector":"f62d1888","implemented":true,"kind":"function","modifiers":[{"id":112345,"kind":"modifierInvocation","modifierName":{"id":112344,"name":"initializer","nodeType":"IdentifierPath","referencedDeclaration":47177,"src":"6211:11:233"},"nodeType":"ModifierInvocation","src":"6211:11:233"}],"name":"initialize","nameLocation":"6172:10:233","parameters":{"id":112343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":112342,"mutability":"mutable","name":"_name","nameLocation":"6197:5:233","nodeType":"VariableDeclaration","scope":112353,"src":"6183:19:233","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":112341,"name":"string","nodeType":"ElementaryTypeName","src":"6183:6:233","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6182:21:233"},"returnParameters":{"id":112346,"nodeType":"ParameterList","parameters":[],"src":"6223:0:233"},"scope":112581,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":112431,"nodeType":"FunctionDefinition","src":"6503:985:233","nodes":[],"body":{"id":112430,"nodeType":"Block","src":"6587:901:233","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":112366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":112363,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6654:3:233","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":112364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6654:10:233","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":112365,"name":"INVITE_GRANTER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112287,"src":"6668:14:233","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6654:28:233","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f7074696d697374496e76697465723a206f6e6c7920696e76697465206772616e7465722063616e206772616e7420696e7669746573","id":112367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6684:56:233","typeDescriptions":{"typeIdentifier":"t_stringliteral_2ed6b1c9b6c6de89f3a38c5e03d0c95f86fa67832406c6da6875cfaee06b0888","typeString":"literal_string \"OptimistInviter: only invite granter can grant invites\""},"value":"OptimistInviter: only invite granter can grant invites"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2ed6b1c9b6c6de89f3a38c5e03d0c95f86fa67832406c6da6875cfaee06b0888","typeString":"literal_string \"OptimistInviter: only invite granter can grant invites\""}],"id":112362,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6646:7:233","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":112368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6646:95:233","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":112369,"nodeType":"ExpressionStatement","src":"6646:95:233"},{"assignments":[112371],"declarations":[{"constant":false,"id":112371,"mutability":"mutable","name":"length","nameLocation":"6760:6:233","nodeType":"VariableDeclaration","scope":112430,"src":"6752:14:233","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":112370,"name":"uint256","nodeType":"ElementaryTypeName","src":"6752:7:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":112374,"initialValue":{"expression":{"id":112372,"name":"_accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112357,"src":"6769:9:233","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":112373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"6769:16:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6752:33:233"},{"assignments":[112380],"declarations":[{"constant":false,"id":112380,"mutability":"mutable","name":"attestations","nameLocation":"6840:12:233","nodeType":"VariableDeclaration","scope":112430,"src":"6796:56:233","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationData_$111712_memory_ptr_$dyn_memory_ptr","typeString":"struct AttestationStation.AttestationData[]"},"typeName":{"baseType":{"id":112378,"nodeType":"UserDefinedTypeName","pathNode":{"id":112377,"name":"AttestationStation.AttestationData","nodeType":"IdentifierPath","referencedDeclaration":111712,"src":"6796:34:233"},"referencedDeclaration":111712,"src":"6796:34:233","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationData_$111712_storage_ptr","typeString":"struct AttestationStation.AttestationData"}},"id":112379,"nodeType":"ArrayTypeName","src":"6796:36:233","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationData_$111712_storage_$dyn_storage_ptr","typeString":"struct AttestationStation.AttestationData[]"}},"visibility":"internal"}],"id":112387,"initialValue":{"arguments":[{"id":112385,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112371,"src":"6896:6:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":112384,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"6855:40:233","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_AttestationData_$111712_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct AttestationStation.AttestationData memory[] memory)"},"typeName":{"baseType":{"id":112382,"nodeType":"UserDefinedTypeName","pathNode":{"id":112381,"name":"AttestationStation.AttestationData","nodeType":"IdentifierPath","referencedDeclaration":111712,"src":"6859:34:233"},"referencedDeclaration":111712,"src":"6859:34:233","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationData_$111712_storage_ptr","typeString":"struct AttestationStation.AttestationData"}},"id":112383,"nodeType":"ArrayTypeName","src":"6859:36:233","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationData_$111712_storage_$dyn_storage_ptr","typeString":"struct AttestationStation.AttestationData[]"}}},"id":112386,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6855:48:233","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationData_$111712_memory_ptr_$dyn_memory_ptr","typeString":"struct AttestationStation.AttestationData memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"6796:107:233"},{"body":{"id":112422,"nodeType":"Block","src":"6943:488:233","statements":[{"expression":{"id":112400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":112394,"name":"inviteCounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112317,"src":"7017:12:233","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":112398,"indexExpression":{"baseExpression":{"id":112395,"name":"_accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112357,"src":"7030:9:233","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":112397,"indexExpression":{"id":112396,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112389,"src":"7040:1:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7030:12:233","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7017:26:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":112399,"name":"_inviteCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112359,"src":"7046:12:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7017:41:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":112401,"nodeType":"ExpressionStatement","src":"7017:41:233"},{"expression":{"id":112416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":112402,"name":"attestations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112380,"src":"7170:12:233","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationData_$111712_memory_ptr_$dyn_memory_ptr","typeString":"struct AttestationStation.AttestationData memory[] memory"}},"id":112404,"indexExpression":{"id":112403,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112389,"src":"7183:1:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7170:15:233","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationData_$111712_memory_ptr","typeString":"struct AttestationStation.AttestationData memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":112407,"name":"_accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112357,"src":"7248:9:233","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":112409,"indexExpression":{"id":112408,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112389,"src":"7258:1:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7248:12:233","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":112410,"name":"CAN_INVITE_ATTESTATION_KEY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112284,"src":"7283:26:233","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"hexValue":"74727565","id":112413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7338:6:233","typeDescriptions":{"typeIdentifier":"t_stringliteral_6273151f959616268004b58dbb21e5c851b7b8d04498b4aabee12291d22fc034","typeString":"literal_string \"true\""},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_6273151f959616268004b58dbb21e5c851b7b8d04498b4aabee12291d22fc034","typeString":"literal_string \"true\""}],"id":112412,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7332:5:233","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":112411,"name":"bytes","nodeType":"ElementaryTypeName","src":"7332:5:233","typeDescriptions":{}}},"id":112414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7332:13:233","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":112405,"name":"AttestationStation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111810,"src":"7188:18:233","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AttestationStation_$111810_$","typeString":"type(contract AttestationStation)"}},"id":112406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"AttestationData","nodeType":"MemberAccess","referencedDeclaration":111712,"src":"7188:34:233","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_AttestationData_$111712_storage_ptr_$","typeString":"type(struct AttestationStation.AttestationData storage pointer)"}},"id":112415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"names":["about","key","val"],"nodeType":"FunctionCall","src":"7188:172:233","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AttestationData_$111712_memory_ptr","typeString":"struct AttestationStation.AttestationData memory"}},"src":"7170:190:233","typeDescriptions":{"typeIdentifier":"t_struct$_AttestationData_$111712_memory_ptr","typeString":"struct AttestationStation.AttestationData memory"}},"id":112417,"nodeType":"ExpressionStatement","src":"7170:190:233"},{"id":112421,"nodeType":"UncheckedBlock","src":"7375:46:233","statements":[{"expression":{"id":112419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"7403:3:233","subExpression":{"id":112418,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112389,"src":"7405:1:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":112420,"nodeType":"ExpressionStatement","src":"7403:3:233"}]}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":112393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":112391,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112389,"src":"6930:1:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":112392,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112371,"src":"6934:6:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6930:10:233","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":112423,"initializationExpression":{"assignments":[112389],"declarations":[{"constant":false,"id":112389,"mutability":"mutable","name":"i","nameLocation":"6927:1:233","nodeType":"VariableDeclaration","scope":112423,"src":"6919:9:233","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":112388,"name":"uint256","nodeType":"ElementaryTypeName","src":"6919:7:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":112390,"nodeType":"VariableDeclarationStatement","src":"6919:9:233"},"nodeType":"ForStatement","src":"6914:517:233"},{"expression":{"arguments":[{"id":112427,"name":"attestations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112380,"src":"7468:12:233","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_AttestationData_$111712_memory_ptr_$dyn_memory_ptr","typeString":"struct AttestationStation.AttestationData memory[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_struct$_AttestationData_$111712_memory_ptr_$dyn_memory_ptr","typeString":"struct AttestationStation.AttestationData memory[] memory"}],"expression":{"id":112424,"name":"ATTESTATION_STATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112291,"src":"7441:19:233","typeDescriptions":{"typeIdentifier":"t_contract$_AttestationStation_$111810","typeString":"contract AttestationStation"}},"id":112426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"attest","nodeType":"MemberAccess","referencedDeclaration":111809,"src":"7441:26:233","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_array$_t_struct$_AttestationData_$111712_memory_ptr_$dyn_memory_ptr_$returns$__$","typeString":"function (struct AttestationStation.AttestationData memory[] memory) external"}},"id":112428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7441:40:233","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":112429,"nodeType":"ExpressionStatement","src":"7441:40:233"}]},"documentation":{"id":112354,"nodeType":"StructuredDocumentation","src":"6282:216:233","text":"@notice Allows invite granter to set the number of invites an address has.\n @param _accounts    An array of accounts to update the invite counts of.\n @param _inviteCount Number of invites to set to."},"functionSelector":"25b27a3d","implemented":true,"kind":"function","modifiers":[],"name":"setInviteCounts","nameLocation":"6512:15:233","parameters":{"id":112360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":112357,"mutability":"mutable","name":"_accounts","nameLocation":"6547:9:233","nodeType":"VariableDeclaration","scope":112431,"src":"6528:28:233","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":112355,"name":"address","nodeType":"ElementaryTypeName","src":"6528:7:233","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":112356,"nodeType":"ArrayTypeName","src":"6528:9:233","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":112359,"mutability":"mutable","name":"_inviteCount","nameLocation":"6566:12:233","nodeType":"VariableDeclaration","scope":112431,"src":"6558:20:233","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":112358,"name":"uint256","nodeType":"ElementaryTypeName","src":"6558:7:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6527:52:233"},"returnParameters":{"id":112361,"nodeType":"ParameterList","parameters":[],"src":"6587:0:233"},"scope":112581,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":112454,"nodeType":"FunctionDefinition","src":"8634:500:233","nodes":[],"body":{"id":112453,"nodeType":"Block","src":"8684:450:233","nodes":[],"statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":112442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":112438,"name":"commitmentTimestamps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112305,"src":"8982:20:233","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":112440,"indexExpression":{"id":112439,"name":"_commitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112434,"src":"9003:11:233","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8982:33:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":112441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9019:1:233","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8982:38:233","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f7074696d697374496e76697465723a20636f6d6d69746d656e7420616c7265616479206d616465","id":112443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9022:42:233","typeDescriptions":{"typeIdentifier":"t_stringliteral_c59771144ba9f9a8f1889fbc4d2b3d0f0ccf8cf5ea047589db40484a07632fcf","typeString":"literal_string \"OptimistInviter: commitment already made\""},"value":"OptimistInviter: commitment already made"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c59771144ba9f9a8f1889fbc4d2b3d0f0ccf8cf5ea047589db40484a07632fcf","typeString":"literal_string \"OptimistInviter: commitment already made\""}],"id":112437,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8974:7:233","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":112444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8974:91:233","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":112445,"nodeType":"ExpressionStatement","src":"8974:91:233"},{"expression":{"id":112451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":112446,"name":"commitmentTimestamps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112305,"src":"9076:20:233","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":112448,"indexExpression":{"id":112447,"name":"_commitment","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112434,"src":"9097:11:233","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9076:33:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":112449,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"9112:5:233","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":112450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"9112:15:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9076:51:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":112452,"nodeType":"ExpressionStatement","src":"9076:51:233"}]},"documentation":{"id":112432,"nodeType":"StructuredDocumentation","src":"7494:1135:233","text":"@notice Allows anyone (but likely the claimer) to commit a received signature along with the\n         address to claim to.\n         Before calling this function, the claimer should have received a signature from the\n          issuer off-chain. The claimer then calls this function with the hash of the\n         claimer's address and the received signature. This is necessary to prevent\n         front-running when the invitee is claiming the invite. Without a commit and reveal\n         scheme, anyone who is watching the mempool can take the signature being submitted\n         and front run the transaction to claim the invite to their own address.\n         The same commitment can only be made once, and the function reverts if the\n         commitment has already been made. This prevents griefing where a malicious party can\n         prevent the original claimer from being able to claimInvite.\n @param _commitment A hash of the claimer and signature concatenated.\n                    keccak256(abi.encode(_claimer, _signature))"},"functionSelector":"187e3cd1","implemented":true,"kind":"function","modifiers":[],"name":"commitInvite","nameLocation":"8643:12:233","parameters":{"id":112435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":112434,"mutability":"mutable","name":"_commitment","nameLocation":"8664:11:233","nodeType":"VariableDeclaration","scope":112454,"src":"8656:19:233","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":112433,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8656:7:233","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8655:21:233"},"returnParameters":{"id":112436,"nodeType":"ParameterList","parameters":[],"src":"8684:0:233"},"scope":112581,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"id":112580,"nodeType":"FunctionDefinition","src":"10204:2892:233","nodes":[],"body":{"id":112579,"nodeType":"Block","src":"10318:2778:233","nodes":[],"statements":[{"assignments":[112466],"declarations":[{"constant":false,"id":112466,"mutability":"mutable","name":"commitmentTimestamp","nameLocation":"10336:19:233","nodeType":"VariableDeclaration","scope":112579,"src":"10328:27:233","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":112465,"name":"uint256","nodeType":"ElementaryTypeName","src":"10328:7:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":112476,"initialValue":{"baseExpression":{"id":112467,"name":"commitmentTimestamps","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112305,"src":"10358:20:233","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":112475,"indexExpression":{"arguments":[{"arguments":[{"id":112471,"name":"_claimer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112457,"src":"10400:8:233","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":112472,"name":"_signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112462,"src":"10410:10:233","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":112469,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10389:3:233","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":112470,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"10389:10:233","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":112473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10389:32:233","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":112468,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"10379:9:233","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":112474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10379:43:233","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10358:65:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10328:95:233"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":112480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":112478,"name":"commitmentTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112466,"src":"10510:19:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":112479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10532:1:233","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10510:23:233","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f7074696d697374496e76697465723a20636c61696d657220616e64207369676e61747572652068617665206e6f74206265656e20636f6d6d697474656420796574","id":112481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10535:68:233","typeDescriptions":{"typeIdentifier":"t_stringliteral_150b4b3e6269d0a7956082ba4b1397ebce37ad4da3497a50fd839e20f1abacab","typeString":"literal_string \"OptimistInviter: claimer and signature have not been committed yet\""},"value":"OptimistInviter: claimer and signature have not been committed yet"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_150b4b3e6269d0a7956082ba4b1397ebce37ad4da3497a50fd839e20f1abacab","typeString":"literal_string \"OptimistInviter: claimer and signature have not been committed yet\""}],"id":112477,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10502:7:233","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":112482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10502:102:233","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":112483,"nodeType":"ExpressionStatement","src":"10502:102:233"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":112490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":112487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":112485,"name":"commitmentTimestamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112466,"src":"10722:19:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":112486,"name":"MIN_COMMITMENT_PERIOD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112295,"src":"10744:21:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10722:43:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":112488,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"10769:5:233","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":112489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"10769:15:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10722:62:233","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f7074696d697374496e76697465723a206d696e696d756d20636f6d6d69746d656e7420706572696f6420686173206e6f7420656c617073656420796574","id":112491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10798:64:233","typeDescriptions":{"typeIdentifier":"t_stringliteral_1754a1cd909c83dd8a333d19716782ee95053d12f7fb0cbcefb106d20e57dd77","typeString":"literal_string \"OptimistInviter: minimum commitment period has not elapsed yet\""},"value":"OptimistInviter: minimum commitment period has not elapsed yet"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1754a1cd909c83dd8a333d19716782ee95053d12f7fb0cbcefb106d20e57dd77","typeString":"literal_string \"OptimistInviter: minimum commitment period has not elapsed yet\""}],"id":112484,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10701:7:233","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":112492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10701:171:233","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":112493,"nodeType":"ExpressionStatement","src":"10701:171:233"},{"assignments":[112495],"declarations":[{"constant":false,"id":112495,"mutability":"mutable","name":"digest","nameLocation":"10970:6:233","nodeType":"VariableDeclaration","scope":112579,"src":"10962:14:233","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":112494,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10962:7:233","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":112508,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"id":112500,"name":"CLAIMABLE_INVITE_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112277,"src":"11030:25:233","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":112501,"name":"_claimableInvite","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112460,"src":"11057:16:233","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$112300_calldata_ptr","typeString":"struct OptimistInviter.ClaimableInvite calldata"}},"id":112502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"issuer","nodeType":"MemberAccess","referencedDeclaration":112297,"src":"11057:23:233","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":112503,"name":"_claimableInvite","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112460,"src":"11082:16:233","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$112300_calldata_ptr","typeString":"struct OptimistInviter.ClaimableInvite calldata"}},"id":112504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":112299,"src":"11082:22:233","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":112498,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"11019:3:233","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":112499,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"11019:10:233","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":112505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11019:86:233","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":112497,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"11009:9:233","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":112506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11009:97:233","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":112496,"name":"_hashTypedDataV4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49385,"src":"10979:16:233","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":112507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"10979:137:233","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10962:154:233"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":112512,"name":"_claimableInvite","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112460,"src":"11543:16:233","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$112300_calldata_ptr","typeString":"struct OptimistInviter.ClaimableInvite calldata"}},"id":112513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"issuer","nodeType":"MemberAccess","referencedDeclaration":112297,"src":"11543:23:233","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":112514,"name":"digest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112495,"src":"11568:6:233","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":112515,"name":"_signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112462,"src":"11576:10:233","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":112510,"name":"SignatureChecker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54205,"src":"11506:16:233","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignatureChecker_$54205_$","typeString":"type(library SignatureChecker)"}},"id":112511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"isValidSignatureNow","nodeType":"MemberAccess","referencedDeclaration":54204,"src":"11506:36:233","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,bytes32,bytes memory) view returns (bool)"}},"id":112516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11506:81:233","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f7074696d697374496e76697465723a20696e76616c6964207369676e6174757265","id":112517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11601:36:233","typeDescriptions":{"typeIdentifier":"t_stringliteral_500930103ce0a9c4420cfce4d485d194eb14c0f8e4a31d95173bd70c498a047a","typeString":"literal_string \"OptimistInviter: invalid signature\""},"value":"OptimistInviter: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_500930103ce0a9c4420cfce4d485d194eb14c0f8e4a31d95173bd70c498a047a","typeString":"literal_string \"OptimistInviter: invalid signature\""}],"id":112509,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11485:7:233","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":112518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11485:162:233","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":112519,"nodeType":"ExpressionStatement","src":"11485:162:233"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":112529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":112521,"name":"usedNonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112312,"src":"11975:10:233","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_bool_$_$","typeString":"mapping(address => mapping(bytes32 => bool))"}},"id":112524,"indexExpression":{"expression":{"id":112522,"name":"_claimableInvite","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112460,"src":"11986:16:233","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$112300_calldata_ptr","typeString":"struct OptimistInviter.ClaimableInvite calldata"}},"id":112523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"issuer","nodeType":"MemberAccess","referencedDeclaration":112297,"src":"11986:23:233","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11975:35:233","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":112527,"indexExpression":{"expression":{"id":112525,"name":"_claimableInvite","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112460,"src":"12011:16:233","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$112300_calldata_ptr","typeString":"struct OptimistInviter.ClaimableInvite calldata"}},"id":112526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":112299,"src":"12011:22:233","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11975:59:233","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"66616c7365","id":112528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12038:5:233","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"11975:68:233","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f7074696d697374496e76697465723a206e6f6e63652068617320616c7265616479206265656e2075736564","id":112530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12057:46:233","typeDescriptions":{"typeIdentifier":"t_stringliteral_68c43792175e0a784516b96c87171fd219b33a959a07a37ddad143e606225f08","typeString":"literal_string \"OptimistInviter: nonce has already been used\""},"value":"OptimistInviter: nonce has already been used"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68c43792175e0a784516b96c87171fd219b33a959a07a37ddad143e606225f08","typeString":"literal_string \"OptimistInviter: nonce has already been used\""}],"id":112520,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11954:7:233","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":112531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"11954:159:233","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":112532,"nodeType":"ExpressionStatement","src":"11954:159:233"},{"expression":{"id":112541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":112533,"name":"usedNonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112312,"src":"12203:10:233","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_bytes32_$_t_bool_$_$","typeString":"mapping(address => mapping(bytes32 => bool))"}},"id":112538,"indexExpression":{"expression":{"id":112534,"name":"_claimableInvite","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112460,"src":"12214:16:233","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$112300_calldata_ptr","typeString":"struct OptimistInviter.ClaimableInvite calldata"}},"id":112535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"issuer","nodeType":"MemberAccess","referencedDeclaration":112297,"src":"12214:23:233","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12203:35:233","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":112539,"indexExpression":{"expression":{"id":112536,"name":"_claimableInvite","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112460,"src":"12239:16:233","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$112300_calldata_ptr","typeString":"struct OptimistInviter.ClaimableInvite calldata"}},"id":112537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":112299,"src":"12239:22:233","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12203:59:233","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":112540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12265:4:233","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"12203:66:233","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":112542,"nodeType":"ExpressionStatement","src":"12203:66:233"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":112549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":112544,"name":"inviteCounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112317,"src":"12383:12:233","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":112547,"indexExpression":{"expression":{"id":112545,"name":"_claimableInvite","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112460,"src":"12396:16:233","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$112300_calldata_ptr","typeString":"struct OptimistInviter.ClaimableInvite calldata"}},"id":112546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"issuer","nodeType":"MemberAccess","referencedDeclaration":112297,"src":"12396:23:233","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12383:37:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":112548,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12423:1:233","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12383:41:233","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f7074696d697374496e76697465723a2069737375657220686173206e6f20696e7669746573","id":112550,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12426:40:233","typeDescriptions":{"typeIdentifier":"t_stringliteral_4803ebd41cbbd33bc67587d140c1e958b45e936e7a319866a2bc4472749b0b82","typeString":"literal_string \"OptimistInviter: issuer has no invites\""},"value":"OptimistInviter: issuer has no invites"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4803ebd41cbbd33bc67587d140c1e958b45e936e7a319866a2bc4472749b0b82","typeString":"literal_string \"OptimistInviter: issuer has no invites\""}],"id":112543,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12375:7:233","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":112551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12375:92:233","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":112552,"nodeType":"ExpressionStatement","src":"12375:92:233"},{"id":112559,"nodeType":"UncheckedBlock","src":"12598:74:233","statements":[{"expression":{"id":112557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"12622:39:233","subExpression":{"baseExpression":{"id":112553,"name":"inviteCounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112317,"src":"12624:12:233","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":112556,"indexExpression":{"expression":{"id":112554,"name":"_claimableInvite","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112460,"src":"12637:16:233","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$112300_calldata_ptr","typeString":"struct OptimistInviter.ClaimableInvite calldata"}},"id":112555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"issuer","nodeType":"MemberAccess","referencedDeclaration":112297,"src":"12637:23:233","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12624:37:233","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":112558,"nodeType":"ExpressionStatement","src":"12622:39:233"}]},{"expression":{"arguments":[{"id":112563,"name":"_claimer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112457,"src":"12881:8:233","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":112564,"name":"OptimistConstants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112592,"src":"12903:17:233","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_OptimistConstants_$112592_$","typeString":"type(library OptimistConstants)"}},"id":112565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"OPTIMIST_CAN_MINT_FROM_INVITE_ATTESTATION_KEY","nodeType":"MemberAccess","referencedDeclaration":112591,"src":"12903:63:233","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"expression":{"id":112568,"name":"_claimableInvite","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112460,"src":"12991:16:233","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$112300_calldata_ptr","typeString":"struct OptimistInviter.ClaimableInvite calldata"}},"id":112569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"issuer","nodeType":"MemberAccess","referencedDeclaration":112297,"src":"12991:23:233","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":112566,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"12980:3:233","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":112567,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"12980:10:233","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":112570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12980:35:233","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":112560,"name":"ATTESTATION_STATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112291,"src":"12841:19:233","typeDescriptions":{"typeIdentifier":"t_contract$_AttestationStation_$111810","typeString":"contract AttestationStation"}},"id":112562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"attest","nodeType":"MemberAccess","referencedDeclaration":111766,"src":"12841:26:233","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes32,bytes memory) external"}},"id":112571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"12841:184:233","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":112572,"nodeType":"ExpressionStatement","src":"12841:184:233"},{"eventCall":{"arguments":[{"expression":{"id":112574,"name":"_claimableInvite","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112460,"src":"13055:16:233","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$112300_calldata_ptr","typeString":"struct OptimistInviter.ClaimableInvite calldata"}},"id":112575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"issuer","nodeType":"MemberAccess","referencedDeclaration":112297,"src":"13055:23:233","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":112576,"name":"_claimer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112457,"src":"13080:8:233","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":112573,"name":"InviteClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112267,"src":"13041:13:233","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":112577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"13041:48:233","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":112578,"nodeType":"EmitStatement","src":"13036:53:233"}]},"documentation":{"id":112455,"nodeType":"StructuredDocumentation","src":"9140:1059:233","text":"@notice Allows anyone to reveal a commitment and claim an invite.\n         The hash, keccak256(abi.encode(_claimer, _signature)), should have been already\n         committed using commitInvite. Before issuing the \"optimist.can-mint-from-invite\"\n         attestation, this function checks that\n           1) the hash corresponding to the _claimer and the _signature was committed\n           2) MIN_COMMITMENT_PERIOD has passed since the commitment was made.\n           3) the _signature is signed correctly by the issuer\n           4) the _signature hasn't already been used to claim an invite before\n           5) the _signature issuer has not used up all of their invites\n         This function doesn't require that the _claimer is calling this function.\n @param _claimer         Address that will be granted the invite.\n @param _claimableInvite ClaimableInvite struct containing the issuer and nonce.\n @param _signature       Signature signed over the claimable invite."},"functionSelector":"50eedbc2","implemented":true,"kind":"function","modifiers":[],"name":"claimInvite","nameLocation":"10213:11:233","parameters":{"id":112463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":112457,"mutability":"mutable","name":"_claimer","nameLocation":"10233:8:233","nodeType":"VariableDeclaration","scope":112580,"src":"10225:16:233","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":112456,"name":"address","nodeType":"ElementaryTypeName","src":"10225:7:233","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":112460,"mutability":"mutable","name":"_claimableInvite","nameLocation":"10268:16:233","nodeType":"VariableDeclaration","scope":112580,"src":"10243:41:233","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$112300_calldata_ptr","typeString":"struct OptimistInviter.ClaimableInvite"},"typeName":{"id":112459,"nodeType":"UserDefinedTypeName","pathNode":{"id":112458,"name":"ClaimableInvite","nodeType":"IdentifierPath","referencedDeclaration":112300,"src":"10243:15:233"},"referencedDeclaration":112300,"src":"10243:15:233","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimableInvite_$112300_storage_ptr","typeString":"struct OptimistInviter.ClaimableInvite"}},"visibility":"internal"},{"constant":false,"id":112462,"mutability":"mutable","name":"_signature","nameLocation":"10299:10:233","nodeType":"VariableDeclaration","scope":112580,"src":"10286:23:233","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":112461,"name":"bytes","nodeType":"ElementaryTypeName","src":"10286:5:233","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10224:86:233"},"returnParameters":{"id":112464,"nodeType":"ParameterList","parameters":[],"src":"10318:0:233"},"scope":112581,"stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"abstract":false,"baseContracts":[{"baseName":{"id":112257,"name":"ISemver","nodeType":"IdentifierPath","referencedDeclaration":113738,"src":"2175:7:233"},"id":112258,"nodeType":"InheritanceSpecifier","src":"2175:7:233"},{"baseName":{"id":112259,"name":"EIP712Upgradeable","nodeType":"IdentifierPath","referencedDeclaration":49409,"src":"2184:17:233"},"id":112260,"nodeType":"InheritanceSpecifier","src":"2184:17:233"}],"canonicalName":"OptimistInviter","contractDependencies":[],"contractKind":"contract","documentation":{"id":112256,"nodeType":"StructuredDocumentation","src":"503:1644:233","text":"@custom:upgradeable\n @title  OptimistInviter\n @notice OptimistInviter issues \"optimist.can-invite\" and \"optimist.can-mint-from-invite\"\n         attestations. Accounts that have invites can issue signatures that allow other\n         accounts to claim an invite. The invitee uses a claim and reveal flow to claim the\n         invite to an address of their choosing.\n         Parties involved:\n          1) INVITE_GRANTER: trusted account that can allow accounts to issue invites\n          2) issuer: account that is allowed to issue invites\n          3) claimer: account that receives the invites\n        Flow:\n          1) INVITE_GRANTER calls _setInviteCount to allow an issuer to issue a certain number\n             of invites, and also creates a \"optimist.can-invite\" attestation for the issuer\n          2) Off-chain, the issuer signs (EIP-712) a ClaimableInvite to produce a signature\n          3) Off-chain, invite issuer sends the plaintext ClaimableInvite and the signature\n             to the recipient\n          4) claimer chooses an address they want to receive the invite on\n          5) claimer commits the hash of the address they want to receive the invite on and the\n             received signature keccak256(abi.encode(addressToReceiveTo, receivedSignature))\n             using the commitInvite function\n          6) claimer waits for the MIN_COMMITMENT_PERIOD to pass.\n          7) claimer reveals the plaintext ClaimableInvite and the signature using the\n             claimInvite function, receiving the \"optimist.can-mint-from-invite\" attestation"},"fullyImplemented":true,"linearizedBaseContracts":[112581,49409,47257,113738],"name":"OptimistInviter","nameLocation":"2156:15:233","scope":112582,"usedErrors":[]}],"license":"MIT"},"id":233}